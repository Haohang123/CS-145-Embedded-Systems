
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000246  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <avr_wait>:
	WDTCR = 15;
}

void
avr_wait(unsigned short msec)
{
  6c:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  72:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  74:	08 c0       	rjmp	.+16     	; 0x86 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  76:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  78:	98 b7       	in	r25, 0x38	; 56
  7a:	91 60       	ori	r25, 0x01	; 1
  7c:	98 bf       	out	0x38, r25	; 56
		WDR();
  7e:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  80:	08 b6       	in	r0, 0x38	; 56
  82:	00 fe       	sbrs	r0, 0
  84:	fd cf       	rjmp	.-6      	; 0x80 <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  86:	21 50       	subi	r18, 0x01	; 1
  88:	31 09       	sbc	r19, r1
  8a:	a8 f7       	brcc	.-22     	; 0x76 <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  8c:	13 be       	out	0x33, r1	; 51
  8e:	08 95       	ret

00000090 <is_pressed>:
#include <stdio.h>
#include "avr.h"
#include "lcd.h"


int is_pressed(int row, int col) {
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	18 2f       	mov	r17, r24
  9a:	eb 01       	movw	r28, r22
	// all row and col is NC
	DDRC = 0;
  9c:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  9e:	15 ba       	out	0x15, r1	; 21
	avr_wait(1);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	
	// set all col to strong 1
	DDRC = 0x01;
  a8:	01 e0       	ldi	r16, 0x01	; 1
  aa:	04 bb       	out	0x14, r16	; 20
	SET_BIT(PORTC, 4);
  ac:	ac 9a       	sbi	0x15, 4	; 21
	SET_BIT(PORTC, 5);
  ae:	ad 9a       	sbi	0x15, 5	; 21
	SET_BIT(PORTC, 6);
  b0:	ae 9a       	sbi	0x15, 6	; 21
	SET_BIT(PORTC, 7);
  b2:	af 9a       	sbi	0x15, 7	; 21
	avr_wait(1);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	
	// set col to strong 0
	DDRC = 0x01;
  bc:	04 bb       	out	0x14, r16	; 20
	CLR_BIT(PORTC, col + 4);
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	9e 01       	movw	r18, r28
  c2:	2c 5f       	subi	r18, 0xFC	; 252
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	c1 e0       	ldi	r28, 0x01	; 1
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	ae 01       	movw	r20, r28
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <is_pressed+0x42>
  ce:	44 0f       	add	r20, r20
  d0:	55 1f       	adc	r21, r21
  d2:	2a 95       	dec	r18
  d4:	e2 f7       	brpl	.-8      	; 0xce <is_pressed+0x3e>
  d6:	84 2f       	mov	r24, r20
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	85 bb       	out	0x15, r24	; 21
	avr_wait(1);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	
	// set row to weak 1
	DDRC = 0;
  e6:	14 ba       	out	0x14, r1	; 20
	SET_BIT(PORTC, row);
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	01 2e       	mov	r0, r17
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <is_pressed+0x62>
  ee:	cc 0f       	add	r28, r28
  f0:	dd 1f       	adc	r29, r29
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <is_pressed+0x5e>
  f6:	c8 2b       	or	r28, r24
  f8:	c5 bb       	out	0x15, r28	; 21
	avr_wait(1);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	
	
	if (GET_BIT(PINC,row)) {
 102:	23 b3       	in	r18, 0x13	; 19
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <is_pressed+0x7c>
 108:	35 95       	asr	r19
 10a:	27 95       	ror	r18
 10c:	1a 95       	dec	r17
 10e:	e2 f7       	brpl	.-8      	; 0x108 <is_pressed+0x78>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	20 ff       	sbrs	r18, 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <is_pressed+0x8c>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	
	return 1;
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <get_key>:

int get_key() {
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	int row, col;
	for (row = 0; row < 4; ++row) {
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	18 c0       	rjmp	.+48     	; 0x164 <get_key+0x3e>
		for (col = 0; col < 4; ++col) {
			if (is_pressed(row,col)) {
 134:	be 01       	movw	r22, r28
 136:	c8 01       	movw	r24, r16
 138:	0e 94 48 00 	call	0x90	; 0x90 <is_pressed>
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	49 f0       	breq	.+18     	; 0x152 <get_key+0x2c>
				return (row * 4) + col + 1;
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	00 0f       	add	r16, r16
 146:	11 1f       	adc	r17, r17
 148:	c0 0f       	add	r28, r16
 14a:	d1 1f       	adc	r29, r17
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	0c c0       	rjmp	.+24     	; 0x16a <get_key+0x44>
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
		for (col = 0; col < 4; ++col) {
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c4 30       	cpi	r28, 0x04	; 4
 156:	d1 05       	cpc	r29, r1
 158:	69 f7       	brne	.-38     	; 0x134 <get_key+0xe>
	return 1;
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	04 30       	cpi	r16, 0x04	; 4
 160:	11 05       	cpc	r17, r1
 162:	19 f0       	breq	.+6      	; 0x16a <get_key+0x44>
	}
	
	return 1;
}

int get_key() {
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	e5 cf       	rjmp	.-54     	; 0x134 <get_key+0xe>
				return (row * 4) + col + 1;
			}
		}
	}
	return 0;
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <blinkNtimes>:

void blinkNtimes(int times) {
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	for(int i = 0; i < times; ++i) {
 17c:	18 16       	cp	r1, r24
 17e:	19 06       	cpc	r1, r25
 180:	8c f4       	brge	.+34     	; 0x1a4 <blinkNtimes+0x30>
 182:	8c 01       	movw	r16, r24
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
		CLR_BIT(PORTB,0);
 188:	c0 98       	cbi	0x18, 0	; 24
		avr_wait(500);
 18a:	84 ef       	ldi	r24, 0xF4	; 244
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
		SET_BIT(PORTB,0);
 192:	c0 9a       	sbi	0x18, 0	; 24
		avr_wait(500);
 194:	84 ef       	ldi	r24, 0xF4	; 244
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	}
	return 0;
}

void blinkNtimes(int times) {
	for(int i = 0; i < times; ++i) {
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	0c 17       	cp	r16, r28
 1a0:	1d 07       	cpc	r17, r29
 1a2:	91 f7       	brne	.-28     	; 0x188 <blinkNtimes+0x14>
		CLR_BIT(PORTB,0);
		avr_wait(500);
		SET_BIT(PORTB,0);
		avr_wait(500);
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <main>:

int main(void)
{
	DDRB = 0x01;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		int key = get_key();
 1b2:	0e 94 93 00 	call	0x126	; 0x126 <get_key>
		if (key == 0) {
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	11 f4       	brne	.+4      	; 0x1be <main+0x10>
			SET_BIT(PORTB, 0);
 1ba:	c0 9a       	sbi	0x18, 0	; 24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x14>
		}
		else {
			blinkNtimes(key);
 1be:	0e 94 ba 00 	call	0x174	; 0x174 <blinkNtimes>
		}
		//CLR_BIT(PORTB,0);
		avr_wait(2000);
 1c2:	80 ed       	ldi	r24, 0xD0	; 208
 1c4:	97 e0       	ldi	r25, 0x07	; 7
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
    }
 1ca:	f3 cf       	rjmp	.-26     	; 0x1b2 <main+0x4>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
