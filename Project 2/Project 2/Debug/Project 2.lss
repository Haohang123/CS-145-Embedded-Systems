
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ef  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021c  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <avr_wait>:
	WDTCR = 15;
}

void
avr_wait(unsigned short msec)
{
  6c:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  72:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  74:	08 c0       	rjmp	.+16     	; 0x86 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  76:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  78:	98 b7       	in	r25, 0x38	; 56
  7a:	91 60       	ori	r25, 0x01	; 1
  7c:	98 bf       	out	0x38, r25	; 56
		WDR();
  7e:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  80:	08 b6       	in	r0, 0x38	; 56
  82:	00 fe       	sbrs	r0, 0
  84:	fd cf       	rjmp	.-6      	; 0x80 <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  86:	21 50       	subi	r18, 0x01	; 1
  88:	31 09       	sbc	r19, r1
  8a:	a8 f7       	brcc	.-22     	; 0x76 <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  8c:	13 be       	out	0x33, r1	; 51
  8e:	08 95       	ret

00000090 <is_pressed>:

void increment_time() {
	
}

int is_pressed(int row, int col) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	DDRC = 0;
  94:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  96:	15 ba       	out	0x15, r1	; 21
	
	SET_BIT(DDRC, row);
  98:	44 b3       	in	r20, 0x14	; 20
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <is_pressed+0x16>
  a2:	ee 0f       	add	r30, r30
  a4:	ff 1f       	adc	r31, r31
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <is_pressed+0x12>
  aa:	cf 01       	movw	r24, r30
  ac:	84 2b       	or	r24, r20
  ae:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, col + 4);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	eb 01       	movw	r28, r22
  b4:	24 96       	adiw	r28, 0x04	; 4
  b6:	0c 2e       	mov	r0, r28
  b8:	02 c0       	rjmp	.+4      	; 0xbe <is_pressed+0x2e>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <is_pressed+0x2a>
  c2:	28 2b       	or	r18, r24
  c4:	25 bb       	out	0x15, r18	; 21
	avr_wait(1);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	
	if (GET_BIT(PINC,col + 4)) {
  ce:	23 b3       	in	r18, 0x13	; 19
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <is_pressed+0x48>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	ca 95       	dec	r28
  da:	e2 f7       	brpl	.-8      	; 0xd4 <is_pressed+0x44>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	20 ff       	sbrs	r18, 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <is_pressed+0x58>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	
	return 1;
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <get_key>:

int get_key() {
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	int row, col;
	for (row = 0; row < 4; ++row) {
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	18 c0       	rjmp	.+48     	; 0x12c <get_key+0x3e>
		for (col = 0; col < 4; ++col) {
			if (is_pressed(row,col)) {
  fc:	be 01       	movw	r22, r28
  fe:	c8 01       	movw	r24, r16
 100:	0e 94 48 00 	call	0x90	; 0x90 <is_pressed>
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	49 f0       	breq	.+18     	; 0x11a <get_key+0x2c>
				return (row * 4) + col + 1;
 108:	00 0f       	add	r16, r16
 10a:	11 1f       	adc	r17, r17
 10c:	00 0f       	add	r16, r16
 10e:	11 1f       	adc	r17, r17
 110:	c0 0f       	add	r28, r16
 112:	d1 1f       	adc	r29, r17
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	0c c0       	rjmp	.+24     	; 0x132 <get_key+0x44>
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
		for (col = 0; col < 4; ++col) {
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	c4 30       	cpi	r28, 0x04	; 4
 11e:	d1 05       	cpc	r29, r1
 120:	69 f7       	brne	.-38     	; 0xfc <get_key+0xe>
	return 1;
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	04 30       	cpi	r16, 0x04	; 4
 128:	11 05       	cpc	r17, r1
 12a:	19 f0       	breq	.+6      	; 0x132 <get_key+0x44>
	}
	
	return 1;
}

int get_key() {
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	e5 cf       	rjmp	.-54     	; 0xfc <get_key+0xe>
				return (row * 4) + col + 1;
			}
		}
	}
	return 0;
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <blink>:
		blink();
	}
}

void blink() {
	SET_BIT(PORTB,0);
 13c:	c0 9a       	sbi	0x18, 0	; 24
	avr_wait(500);
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
	CLR_BIT(PORTB,0);
 146:	c0 98       	cbi	0x18, 0	; 24
	avr_wait(500);
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
 150:	08 95       	ret

00000152 <blinkNtimes>:
		}
	}
	return 0;
}

void blinkNtimes(int times) {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	for(int i = 0; i < times; ++i) {
 15a:	18 16       	cp	r1, r24
 15c:	19 06       	cpc	r1, r25
 15e:	4c f4       	brge	.+18     	; 0x172 <blinkNtimes+0x20>
 160:	8c 01       	movw	r16, r24
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
		blink();
 166:	0e 94 9e 00 	call	0x13c	; 0x13c <blink>
	}
	return 0;
}

void blinkNtimes(int times) {
	for(int i = 0; i < times; ++i) {
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	0c 17       	cp	r16, r28
 16e:	1d 07       	cpc	r17, r29
 170:	d1 f7       	brne	.-12     	; 0x166 <blinkNtimes+0x14>
		blink();
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:
	CLR_BIT(PORTB,0);
	avr_wait(500);
}
int main(void)
{
	DDRB = 0x01;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		int key = get_key();
 180:	0e 94 77 00 	call	0xee	; 0xee <get_key>
		blinkNtimes(key);
 184:	0e 94 a9 00 	call	0x152	; 0x152 <blinkNtimes>
		avr_wait(1000);
 188:	88 ee       	ldi	r24, 0xE8	; 232
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	0e 94 36 00 	call	0x6c	; 0x6c <avr_wait>
 190:	f7 cf       	rjmp	.-18     	; 0x180 <main+0x4>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
