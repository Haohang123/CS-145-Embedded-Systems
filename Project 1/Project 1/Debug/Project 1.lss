
Project 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005eb  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056a  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000101  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000303  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000036  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
{
    /* Replace with your application code */
//     while (1) 
//     {
//     }
	DDRB = 1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	87 bb       	out	0x17, r24	; 23
		PORTB = 1;  /* LED ON*/
		/*wait_half_sec();
		printf("%d",3);
		PORTB = 0;  /* LED OFF */
		//wait_half_sec();
		if(PORTB == 1)
  80:	88 b3       	in	r24, 0x18	; 24
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	29 f4       	brne	.+10     	; 0x90 <main+0x14>
			printf("1");
  86:	81 e3       	ldi	r24, 0x31	; 49
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 4d 00 	call	0x9a	; 0x9a <putchar>
  8e:	f8 cf       	rjmp	.-16     	; 0x80 <main+0x4>
		else printf("0");
  90:	80 e3       	ldi	r24, 0x30	; 48
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 4d 00 	call	0x9a	; 0x9a <putchar>
  98:	f3 cf       	rjmp	.-26     	; 0x80 <main+0x4>

0000009a <putchar>:
  9a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
  9e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <_edata+0x3>
  a2:	0e 94 54 00 	call	0xa8	; 0xa8 <fputc>
  a6:	08 95       	ret

000000a8 <fputc>:
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	fb 01       	movw	r30, r22
  b2:	23 81       	ldd	r18, Z+3	; 0x03
  b4:	21 fd       	sbrc	r18, 1
  b6:	03 c0       	rjmp	.+6      	; 0xbe <fputc+0x16>
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	9f ef       	ldi	r25, 0xFF	; 255
  bc:	2c c0       	rjmp	.+88     	; 0x116 <fputc+0x6e>
  be:	22 ff       	sbrs	r18, 2
  c0:	16 c0       	rjmp	.+44     	; 0xee <fputc+0x46>
  c2:	46 81       	ldd	r20, Z+6	; 0x06
  c4:	57 81       	ldd	r21, Z+7	; 0x07
  c6:	24 81       	ldd	r18, Z+4	; 0x04
  c8:	35 81       	ldd	r19, Z+5	; 0x05
  ca:	42 17       	cp	r20, r18
  cc:	53 07       	cpc	r21, r19
  ce:	44 f4       	brge	.+16     	; 0xe0 <fputc+0x38>
  d0:	a0 81       	ld	r26, Z
  d2:	b1 81       	ldd	r27, Z+1	; 0x01
  d4:	9d 01       	movw	r18, r26
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	31 83       	std	Z+1, r19	; 0x01
  dc:	20 83       	st	Z, r18
  de:	8c 93       	st	X, r24
  e0:	26 81       	ldd	r18, Z+6	; 0x06
  e2:	37 81       	ldd	r19, Z+7	; 0x07
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	37 83       	std	Z+7, r19	; 0x07
  ea:	26 83       	std	Z+6, r18	; 0x06
  ec:	14 c0       	rjmp	.+40     	; 0x116 <fputc+0x6e>
  ee:	8b 01       	movw	r16, r22
  f0:	ec 01       	movw	r28, r24
  f2:	fb 01       	movw	r30, r22
  f4:	00 84       	ldd	r0, Z+8	; 0x08
  f6:	f1 85       	ldd	r31, Z+9	; 0x09
  f8:	e0 2d       	mov	r30, r0
  fa:	09 95       	icall
  fc:	89 2b       	or	r24, r25
  fe:	e1 f6       	brne	.-72     	; 0xb8 <fputc+0x10>
 100:	d8 01       	movw	r26, r16
 102:	16 96       	adiw	r26, 0x06	; 6
 104:	8d 91       	ld	r24, X+
 106:	9c 91       	ld	r25, X
 108:	17 97       	sbiw	r26, 0x07	; 7
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	17 96       	adiw	r26, 0x07	; 7
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
 112:	16 97       	sbiw	r26, 0x06	; 6
 114:	ce 01       	movw	r24, r28
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
