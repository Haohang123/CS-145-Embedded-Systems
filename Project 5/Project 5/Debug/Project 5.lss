
Project 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00001676  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  00800112  00800112  000017bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164c  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a19  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd1  00000000  00000000  00003a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00004804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a2  00000000  00000000  00004b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094f  00000000  00000000  0000543a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 05 	call	0xa5a	; 0xa5a <main>
      8a:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <avr_init>:
#include "avr.h"

void
avr_init(void)
{
	WDTCR = 15;
      92:	8f e0       	ldi	r24, 0x0F	; 15
      94:	81 bd       	out	0x21, r24	; 33
      96:	08 95       	ret

00000098 <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
      98:	9c 01       	movw	r18, r24
	TCCR0 = 3;
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      9e:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      a0:	08 c0       	rjmp	.+16     	; 0xb2 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      a2:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
      a4:	98 b7       	in	r25, 0x38	; 56
      a6:	91 60       	ori	r25, 0x01	; 1
      a8:	98 bf       	out	0x38, r25	; 56
		WDR();
      aa:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      ac:	08 b6       	in	r0, 0x38	; 56
      ae:	00 fe       	sbrs	r0, 0
      b0:	fd cf       	rjmp	.-6      	; 0xac <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      b2:	21 50       	subi	r18, 0x01	; 1
      b4:	31 09       	sbc	r19, r1
      b6:	a8 f7       	brcc	.-22     	; 0xa2 <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      b8:	13 be       	out	0x33, r1	; 51
      ba:	08 95       	ret

000000bc <avr_wait2>:
}


void avr_wait2(unsigned short subsec)
{
      bc:	9c 01       	movw	r18, r24
	TCCR0 = 3;
      be:	83 e0       	ldi	r24, 0x03	; 3
      c0:	83 bf       	out	0x33, r24	; 51
	while (subsec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00005);
      c2:	89 ef       	ldi	r24, 0xF9	; 249


void avr_wait2(unsigned short subsec)
{
	TCCR0 = 3;
	while (subsec--) {
      c4:	08 c0       	rjmp	.+16     	; 0xd6 <avr_wait2+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00005);
      c6:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
      c8:	98 b7       	in	r25, 0x38	; 56
      ca:	91 60       	ori	r25, 0x01	; 1
      cc:	98 bf       	out	0x38, r25	; 56
		WDR();
      ce:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      d0:	08 b6       	in	r0, 0x38	; 56
      d2:	00 fe       	sbrs	r0, 0
      d4:	fd cf       	rjmp	.-6      	; 0xd0 <avr_wait2+0x14>


void avr_wait2(unsigned short subsec)
{
	TCCR0 = 3;
	while (subsec--) {
      d6:	21 50       	subi	r18, 0x01	; 1
      d8:	31 09       	sbc	r19, r1
      da:	a8 f7       	brcc	.-22     	; 0xc6 <avr_wait2+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00005);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      dc:	13 be       	out	0x33, r1	; 51
      de:	08 95       	ret

000000e0 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
      e0:	66 23       	and	r22, r22
      e2:	11 f0       	breq	.+4      	; 0xe8 <output+0x8>
      e4:	c0 9a       	sbi	0x18, 0	; 24
      e6:	01 c0       	rjmp	.+2      	; 0xea <output+0xa>
      e8:	c0 98       	cbi	0x18, 0	; 24
      ea:	c1 98       	cbi	0x18, 1	; 24
      ec:	82 bb       	out	0x12, r24	; 18
      ee:	8f ef       	ldi	r24, 0xFF	; 255
      f0:	81 bb       	out	0x11, r24	; 17
      f2:	c2 9a       	sbi	0x18, 2	; 24
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 00       	nop
      fa:	c2 98       	cbi	0x18, 2	; 24
      fc:	08 95       	ret

000000fe <write>:
      fe:	c0 98       	cbi	0x18, 0	; 24
     100:	c1 9a       	sbi	0x18, 1	; 24
     102:	11 ba       	out	0x11, r1	; 17
     104:	90 b3       	in	r25, 0x10	; 16
     106:	c2 9a       	sbi	0x18, 2	; 24
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	11 ba       	out	0x11, r1	; 17
     110:	90 b3       	in	r25, 0x10	; 16
     112:	c2 98       	cbi	0x18, 2	; 24
     114:	99 23       	and	r25, r25
     116:	9c f3       	brlt	.-26     	; 0xfe <write>
     118:	0e 94 70 00 	call	0xe0	; 0xe0 <output>
     11c:	08 95       	ret

0000011e <lcd_init>:
     11e:	b8 9a       	sbi	0x17, 0	; 23
     120:	b9 9a       	sbi	0x17, 1	; 23
     122:	ba 9a       	sbi	0x17, 2	; 23
     124:	80 e1       	ldi	r24, 0x10	; 16
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 4c 00 	call	0x98	; 0x98 <avr_wait>
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	80 e3       	ldi	r24, 0x30	; 48
     130:	0e 94 70 00 	call	0xe0	; 0xe0 <output>
     134:	85 e0       	ldi	r24, 0x05	; 5
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 4c 00 	call	0x98	; 0x98 <avr_wait>
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 e3       	ldi	r24, 0x30	; 48
     140:	0e 94 70 00 	call	0xe0	; 0xe0 <output>
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 4c 00 	call	0x98	; 0x98 <avr_wait>
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	8c e3       	ldi	r24, 0x3C	; 60
     150:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8c e0       	ldi	r24, 0x0C	; 12
     158:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	86 e0       	ldi	r24, 0x06	; 6
     160:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     16c:	08 95       	ret

0000016e <lcd_clr>:
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     176:	08 95       	ret

00000178 <lcd_pos>:
     178:	cf 93       	push	r28
     17a:	c6 2f       	mov	r28, r22
     17c:	98 e2       	ldi	r25, 0x28	; 40
     17e:	89 9f       	mul	r24, r25
     180:	c0 0d       	add	r28, r0
     182:	11 24       	eor	r1, r1
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     18c:	cc 23       	and	r28, r28
     18e:	31 f0       	breq	.+12     	; 0x19c <lcd_pos+0x24>
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	84 e1       	ldi	r24, 0x14	; 20
     194:	0e 94 7f 00 	call	0xfe	; 0xfe <write>
     198:	c1 50       	subi	r28, 0x01	; 1
     19a:	d1 f7       	brne	.-12     	; 0x190 <lcd_pos+0x18>
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <lcd_puts2>:

void
lcd_puts2(const char *s)
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
     1a4:	ec 01       	movw	r28, r24
     1a6:	21 96       	adiw	r28, 0x01	; 1
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	88 23       	and	r24, r24
     1ae:	31 f0       	breq	.+12     	; 0x1bc <lcd_puts2+0x1c>
		write(c, 1);
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	0e 94 7f 00 	call	0xfe	; 0xfe <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
     1b6:	89 91       	ld	r24, Y+
     1b8:	81 11       	cpse	r24, r1
     1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <lcd_puts2+0x10>
		write(c, 1);
	}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <is_pressed>:
// Shared
void reset_datetime(struct datetime *time) {
	time->hour = 0;
	time->minute = 0;
	time->second = 0;
	time->subsecond = 0;
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	14 ba       	out	0x14, r1	; 20
     1c8:	15 ba       	out	0x15, r1	; 21
     1ca:	44 b3       	in	r20, 0x14	; 20
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <is_pressed+0x16>
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	8a 95       	dec	r24
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <is_pressed+0x12>
     1dc:	cf 01       	movw	r24, r30
     1de:	84 2b       	or	r24, r20
     1e0:	84 bb       	out	0x14, r24	; 20
     1e2:	85 b3       	in	r24, 0x15	; 21
     1e4:	eb 01       	movw	r28, r22
     1e6:	24 96       	adiw	r28, 0x04	; 4
     1e8:	0c 2e       	mov	r0, r28
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <is_pressed+0x2e>
     1ec:	22 0f       	add	r18, r18
     1ee:	33 1f       	adc	r19, r19
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <is_pressed+0x2a>
     1f4:	28 2b       	or	r18, r24
     1f6:	25 bb       	out	0x15, r18	; 21
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 4c 00 	call	0x98	; 0x98 <avr_wait>
     200:	23 b3       	in	r18, 0x13	; 19
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <is_pressed+0x48>
     206:	35 95       	asr	r19
     208:	27 95       	ror	r18
     20a:	ca 95       	dec	r28
     20c:	e2 f7       	brpl	.-8      	; 0x206 <is_pressed+0x44>
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	20 ff       	sbrs	r18, 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <is_pressed+0x58>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <get_key>:
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	18 c0       	rjmp	.+48     	; 0x25e <get_key+0x3e>
     22e:	be 01       	movw	r22, r28
     230:	c8 01       	movw	r24, r16
     232:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <is_pressed>
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	49 f0       	breq	.+18     	; 0x24c <get_key+0x2c>
     23a:	00 0f       	add	r16, r16
     23c:	11 1f       	adc	r17, r17
     23e:	00 0f       	add	r16, r16
     240:	11 1f       	adc	r17, r17
     242:	c0 0f       	add	r28, r16
     244:	d1 1f       	adc	r29, r17
     246:	ce 01       	movw	r24, r28
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	0c c0       	rjmp	.+24     	; 0x264 <get_key+0x44>
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	c4 30       	cpi	r28, 0x04	; 4
     250:	d1 05       	cpc	r29, r1
     252:	69 f7       	brne	.-38     	; 0x22e <get_key+0xe>
     254:	0f 5f       	subi	r16, 0xFF	; 255
     256:	1f 4f       	sbci	r17, 0xFF	; 255
     258:	04 30       	cpi	r16, 0x04	; 4
     25a:	11 05       	cpc	r17, r1
     25c:	19 f0       	breq	.+6      	; 0x264 <get_key+0x44>
     25e:	c0 e0       	ldi	r28, 0x00	; 0
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	e5 cf       	rjmp	.-54     	; 0x22e <get_key+0xe>
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <play_note>:
     26e:	6f 92       	push	r6
     270:	7f 92       	push	r7
     272:	8f 92       	push	r8
     274:	9f 92       	push	r9
     276:	af 92       	push	r10
     278:	bf 92       	push	r11
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	eb 01       	movw	r28, r22
     28c:	bc 01       	movw	r22, r24
     28e:	99 0f       	add	r25, r25
     290:	88 0b       	sbc	r24, r24
     292:	99 0b       	sbc	r25, r25
     294:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__floatsisf>
     298:	9b 01       	movw	r18, r22
     29a:	ac 01       	movw	r20, r24
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e4       	ldi	r23, 0x40	; 64
     2a0:	8c e9       	ldi	r24, 0x9C	; 156
     2a2:	96 e4       	ldi	r25, 0x46	; 70
     2a4:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divsf3>
     2a8:	0e 94 99 06 	call	0xd32	; 0xd32 <ceil>
     2ac:	0e 94 22 07 	call	0xe44	; 0xe44 <__fixsfsi>
     2b0:	4b 01       	movw	r8, r22
     2b2:	5c 01       	movw	r10, r24
     2b4:	8b 01       	movw	r16, r22
     2b6:	77 23       	and	r23, r23
     2b8:	14 f4       	brge	.+4      	; 0x2be <play_note+0x50>
     2ba:	0f 5f       	subi	r16, 0xFF	; 255
     2bc:	1f 4f       	sbci	r17, 0xFF	; 255
     2be:	15 95       	asr	r17
     2c0:	07 95       	ror	r16
     2c2:	60 17       	cp	r22, r16
     2c4:	71 07       	cpc	r23, r17
     2c6:	19 f4       	brne	.+6      	; 0x2ce <play_note+0x60>
     2c8:	84 01       	movw	r16, r8
     2ca:	01 50       	subi	r16, 0x01	; 1
     2cc:	11 09       	sbc	r17, r1
     2ce:	64 01       	movw	r12, r8
     2d0:	c0 1a       	sub	r12, r16
     2d2:	d1 0a       	sbc	r13, r17
     2d4:	80 ed       	ldi	r24, 0xD0	; 208
     2d6:	97 e0       	ldi	r25, 0x07	; 7
     2d8:	0e 94 27 08 	call	0x104e	; 0x104e <__divmodhi4>
     2dc:	cb 01       	movw	r24, r22
     2de:	be 01       	movw	r22, r28
     2e0:	0e 94 27 08 	call	0x104e	; 0x104e <__divmodhi4>
     2e4:	3b 01       	movw	r6, r22
     2e6:	7b 01       	movw	r14, r22
     2e8:	16 16       	cp	r1, r22
     2ea:	17 06       	cpc	r1, r23
     2ec:	74 f4       	brge	.+28     	; 0x30a <play_note+0x9c>
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	c3 9a       	sbi	0x18, 3	; 24
     2f4:	c8 01       	movw	r24, r16
     2f6:	0e 94 5e 00 	call	0xbc	; 0xbc <avr_wait2>
     2fa:	c3 98       	cbi	0x18, 3	; 24
     2fc:	c6 01       	movw	r24, r12
     2fe:	0e 94 5e 00 	call	0xbc	; 0xbc <avr_wait2>
     302:	21 96       	adiw	r28, 0x01	; 1
     304:	ec 16       	cp	r14, r28
     306:	fd 06       	cpc	r15, r29
     308:	a1 f7       	brne	.-24     	; 0x2f2 <play_note+0x84>
     30a:	68 9c       	mul	r6, r8
     30c:	90 01       	movw	r18, r0
     30e:	69 9c       	mul	r6, r9
     310:	30 0d       	add	r19, r0
     312:	78 9c       	mul	r7, r8
     314:	30 0d       	add	r19, r0
     316:	11 24       	eor	r1, r1
     318:	80 ed       	ldi	r24, 0xD0	; 208
     31a:	97 e0       	ldi	r25, 0x07	; 7
     31c:	82 1b       	sub	r24, r18
     31e:	93 0b       	sbc	r25, r19
     320:	0e 94 5e 00 	call	0xbc	; 0xbc <avr_wait2>
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	ff 90       	pop	r15
     32e:	ef 90       	pop	r14
     330:	df 90       	pop	r13
     332:	cf 90       	pop	r12
     334:	bf 90       	pop	r11
     336:	af 90       	pop	r10
     338:	9f 90       	pop	r9
     33a:	8f 90       	pop	r8
     33c:	7f 90       	pop	r7
     33e:	6f 90       	pop	r6
     340:	08 95       	ret

00000342 <play_alarm_note>:
     342:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <DURATION_MODIFIER_POSITION>
     346:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <DURATION_MODIFIER_POSITION+0x1>
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	ec 59       	subi	r30, 0x9C	; 156
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	60 81       	ld	r22, Z
     354:	71 81       	ldd	r23, Z+1	; 0x01
     356:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <FREQUENCY_POSITION>
     35a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <FREQUENCY_POSITION+0x1>
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	e6 59       	subi	r30, 0x96	; 150
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	0e 94 37 01 	call	0x26e	; 0x26e <play_note>
     36e:	08 95       	ret

00000370 <increment_current_frequency>:
     370:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <FREQUENCY_POSITION>
     374:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <FREQUENCY_POSITION+0x1>
     378:	8b 30       	cpi	r24, 0x0B	; 11
     37a:	91 05       	cpc	r25, r1
     37c:	2c f4       	brge	.+10     	; 0x388 <increment_current_frequency+0x18>
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <FREQUENCY_POSITION+0x1>
     384:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <FREQUENCY_POSITION>
     388:	08 95       	ret

0000038a <decrement_current_frequency>:
     38a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <FREQUENCY_POSITION>
     38e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <FREQUENCY_POSITION+0x1>
     392:	18 16       	cp	r1, r24
     394:	19 06       	cpc	r1, r25
     396:	2c f4       	brge	.+10     	; 0x3a2 <decrement_current_frequency+0x18>
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <FREQUENCY_POSITION+0x1>
     39e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <FREQUENCY_POSITION>
     3a2:	08 95       	ret

000003a4 <increment_time>:
}

void increment_time(struct datetime *time) {
     3a4:	fc 01       	movw	r30, r24
	time->subsecond ++;
     3a6:	86 81       	ldd	r24, Z+6	; 0x06
     3a8:	97 81       	ldd	r25, Z+7	; 0x07
     3aa:	01 96       	adiw	r24, 0x01	; 1
	if (time->subsecond >= 10) {
     3ac:	8a 30       	cpi	r24, 0x0A	; 10
     3ae:	91 05       	cpc	r25, r1
     3b0:	1c f4       	brge	.+6      	; 0x3b8 <increment_time+0x14>
	time->second = 0;
	time->subsecond = 0;
}

void increment_time(struct datetime *time) {
	time->subsecond ++;
     3b2:	97 83       	std	Z+7, r25	; 0x07
     3b4:	86 83       	std	Z+6, r24	; 0x06
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <increment_time+0x22>
	if (time->subsecond >= 10) {
		time->subsecond = 0;
     3b8:	17 82       	std	Z+7, r1	; 0x07
     3ba:	16 82       	std	Z+6, r1	; 0x06
		time->second ++;
     3bc:	84 81       	ldd	r24, Z+4	; 0x04
     3be:	95 81       	ldd	r25, Z+5	; 0x05
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	95 83       	std	Z+5, r25	; 0x05
     3c4:	84 83       	std	Z+4, r24	; 0x04
	}
	if (time->second >= 60) {
     3c6:	84 81       	ldd	r24, Z+4	; 0x04
     3c8:	95 81       	ldd	r25, Z+5	; 0x05
     3ca:	cc 97       	sbiw	r24, 0x3c	; 60
     3cc:	3c f0       	brlt	.+14     	; 0x3dc <increment_time+0x38>
		time->second = 0;
     3ce:	15 82       	std	Z+5, r1	; 0x05
     3d0:	14 82       	std	Z+4, r1	; 0x04
		time->minute ++;
     3d2:	82 81       	ldd	r24, Z+2	; 0x02
     3d4:	93 81       	ldd	r25, Z+3	; 0x03
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	93 83       	std	Z+3, r25	; 0x03
     3da:	82 83       	std	Z+2, r24	; 0x02
	}
	if (time->minute >= 60) {
     3dc:	82 81       	ldd	r24, Z+2	; 0x02
     3de:	93 81       	ldd	r25, Z+3	; 0x03
     3e0:	cc 97       	sbiw	r24, 0x3c	; 60
     3e2:	3c f0       	brlt	.+14     	; 0x3f2 <increment_time+0x4e>
		time->minute = 0;
     3e4:	13 82       	std	Z+3, r1	; 0x03
     3e6:	12 82       	std	Z+2, r1	; 0x02
		time->hour ++;
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
	}
	if (time->hour >= 24) {
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	48 97       	sbiw	r24, 0x18	; 24
     3f8:	14 f0       	brlt	.+4      	; 0x3fe <increment_time+0x5a>
		time->hour = 0;
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	10 82       	st	Z, r1
     3fe:	08 95       	ret

00000400 <display_lcd>:
	}
}

void display_lcd() {
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	a6 97       	sbiw	r28, 0x26	; 38
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
	lcd_clr();
     424:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clr>
	char buf1[16]; char buf2[16];
	
	char edit_clock_state = " ";
	if (EDIT_CLOCK_STATE == EDIT_CLOCK_ON) {
     428:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <EDIT_CLOCK_STATE>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	21 f0       	breq	.+8      	; 0x438 <display_lcd+0x38>

void display_lcd() {
	lcd_clr();
	char buf1[16]; char buf2[16];
	
	char edit_clock_state = " ";
     430:	83 e9       	ldi	r24, 0x93	; 147
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	f8 2e       	mov	r15, r24
     436:	03 c0       	rjmp	.+6      	; 0x43e <display_lcd+0x3e>
	if (EDIT_CLOCK_STATE == EDIT_CLOCK_ON) {
		edit_clock_state = "C";
     438:	85 e9       	ldi	r24, 0x95	; 149
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	f8 2e       	mov	r15, r24
	}
	
	char time_position[3];
	if (EDIT_TIME_STATE == EDIT_TIME_ON) {
     43e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <EDIT_TIME_STATE>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	c1 f4       	brne	.+48     	; 0x476 <display_lcd+0x76>
		sprintf(time_position, "T%d", EDIT_TIME_POSITION + 1);
     446:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <EDIT_TIME_POSITION>
     44a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <EDIT_TIME_POSITION+0x1>
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	87 e9       	ldi	r24, 0x97	; 151
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	ce 01       	movw	r24, r28
     45e:	81 96       	adiw	r24, 0x21	; 33
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	21 c0       	rjmp	.+66     	; 0x4b8 <display_lcd+0xb8>
	}
	else if (EDIT_ALARM_STATE == EDIT_ALARM_ON) {
     476:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <EDIT_ALARM_STATE>
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	c1 f4       	brne	.+48     	; 0x4ae <display_lcd+0xae>
		sprintf(time_position, "A%d", EDIT_TIME_POSITION + 1);
     47e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <EDIT_TIME_POSITION>
     482:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <EDIT_TIME_POSITION+0x1>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	8b e9       	ldi	r24, 0x9B	; 155
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	ce 01       	movw	r24, r28
     496:	81 96       	adiw	r24, 0x21	; 33
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <display_lcd+0xb8>
	}
	else {
		sprintf(time_position, "  ");
     4ae:	80 e2       	ldi	r24, 0x20	; 32
     4b0:	90 e2       	ldi	r25, 0x20	; 32
     4b2:	9a a3       	std	Y+34, r25	; 0x22
     4b4:	89 a3       	std	Y+33, r24	; 0x21
     4b6:	1b a2       	std	Y+35, r1	; 0x23
	}
	
	char freq_pos[3];
	if (EDIT_FREQUENCY_STATE == EDIT_FREQUENCY_ON) {
     4b8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <EDIT_FREQUENCY_STATE>
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	c1 f4       	brne	.+48     	; 0x4f0 <display_lcd+0xf0>
		sprintf(freq_pos, "F%0d", FREQUENCY_POSITION + 1);
     4c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <FREQUENCY_POSITION>
     4c4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <FREQUENCY_POSITION+0x1>
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	8f e9       	ldi	r24, 0x9F	; 159
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	ce 01       	movw	r24, r28
     4d8:	84 96       	adiw	r24, 0x24	; 36
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	08 c0       	rjmp	.+16     	; 0x500 <display_lcd+0x100>
	}
	else {
		sprintf(freq_pos, "   ");
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	90 e2       	ldi	r25, 0x20	; 32
     4f4:	9d a3       	std	Y+37, r25	; 0x25
     4f6:	8c a3       	std	Y+36, r24	; 0x24
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9f a3       	std	Y+39, r25	; 0x27
     4fe:	8e a3       	std	Y+38, r24	; 0x26
	}
	
	
	sprintf(buf1, "%02d:%02d:%02d %s%s%s", CLOCK_TIME.hour, CLOCK_TIME.minute, CLOCK_TIME.second, edit_clock_state, time_position, freq_pos);
     500:	0f 2d       	mov	r16, r15
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	ce 01       	movw	r24, r28
     506:	84 96       	adiw	r24, 0x24	; 36
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	03 97       	sbiw	r24, 0x03	; 3
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	1f 92       	push	r1
     514:	ff 92       	push	r15
     516:	e4 e5       	ldi	r30, 0x54	; 84
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	85 81       	ldd	r24, Z+5	; 0x05
     51c:	8f 93       	push	r24
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	8f 93       	push	r24
     522:	83 81       	ldd	r24, Z+3	; 0x03
     524:	8f 93       	push	r24
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	8f 93       	push	r24
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	8f 93       	push	r24
     52e:	80 81       	ld	r24, Z
     530:	8f 93       	push	r24
     532:	84 ea       	ldi	r24, 0xA4	; 164
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
	
	if (CLOCK_STATE == ALARM) {
     546:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CLOCK_STATE>
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	81 11       	cpse	r24, r1
     556:	2c c0       	rjmp	.+88     	; 0x5b0 <display_lcd+0x1b0>
		struct datetime alarm = ALARMS[ALARMS_POSITION];
     558:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ALARMS_POSITION>
     55c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ALARMS_POSITION+0x1>
     560:	fc 01       	movw	r30, r24
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	e7 5d       	subi	r30, 0xD7	; 215
     570:	fe 4f       	sbci	r31, 0xFE	; 254
		sprintf(buf2, "%02d:%02d:%02d %d ALARM", alarm.hour, alarm.minute, alarm.second, ALARMS_POSITION + 1);
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	85 81       	ldd	r24, Z+5	; 0x05
     57a:	8f 93       	push	r24
     57c:	84 81       	ldd	r24, Z+4	; 0x04
     57e:	8f 93       	push	r24
     580:	83 81       	ldd	r24, Z+3	; 0x03
     582:	8f 93       	push	r24
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	8f 93       	push	r24
     588:	81 81       	ldd	r24, Z+1	; 0x01
     58a:	8f 93       	push	r24
     58c:	80 81       	ld	r24, Z
     58e:	8f 93       	push	r24
     590:	8a eb       	ldi	r24, 0xBA	; 186
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	ce 01       	movw	r24, r28
     59a:	41 96       	adiw	r24, 0x11	; 17
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	69 c0       	rjmp	.+210    	; 0x682 <display_lcd+0x282>
	}
	else if (CLOCK_STATE == STOP_WATCH) {
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <display_lcd+0x1b6>
     5b4:	49 c0       	rjmp	.+146    	; 0x648 <display_lcd+0x248>
		struct datetime record = STOPWATCH_RECORDED_TIMES[STOPWATCH_RECORDED_TIMES_POSITION];
     5b6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
     5ba:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e2 5a       	subi	r30, 0xA2	; 162
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	f0 80       	ld	r15, Z
     5d0:	e1 80       	ldd	r14, Z+1	; 0x01
     5d2:	d2 80       	ldd	r13, Z+2	; 0x02
     5d4:	c3 80       	ldd	r12, Z+3	; 0x03
     5d6:	b4 80       	ldd	r11, Z+4	; 0x04
     5d8:	a5 80       	ldd	r10, Z+5	; 0x05
		sprintf(buf1, "%02d:%02d:%02d %s WATCH", STOPWATCH_TIME.hour, STOPWATCH_TIME.minute, STOPWATCH_TIME.second, edit_clock_state);
     5da:	1f 93       	push	r17
     5dc:	0f 93       	push	r16
     5de:	e6 e8       	ldi	r30, 0x86	; 134
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	85 81       	ldd	r24, Z+5	; 0x05
     5e4:	8f 93       	push	r24
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	8f 93       	push	r24
     5ea:	83 81       	ldd	r24, Z+3	; 0x03
     5ec:	8f 93       	push	r24
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	8f 93       	push	r24
     5f2:	81 81       	ldd	r24, Z+1	; 0x01
     5f4:	8f 93       	push	r24
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 93       	push	r24
     5fa:	82 ed       	ldi	r24, 0xD2	; 210
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
		sprintf(buf2, "%02d:%02d:%02d R%d", record.hour, record.minute, record.second, STOPWATCH_RECORDED_TIMES_POSITION + 1);
     60e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     612:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	8a ee       	ldi	r24, 0xEA	; 234
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	ce 01       	movw	r24, r28
     632:	41 96       	adiw	r24, 0x11	; 17
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	1d c0       	rjmp	.+58     	; 0x682 <display_lcd+0x282>
	}
	else { // CLOCK_STATE == TIMER
		sprintf(buf2, "%02d:%02d:%02d TIMER", TIMER_TIME.hour, TIMER_TIME.minute, TIMER_TIME.second);
     648:	e0 e2       	ldi	r30, 0x20	; 32
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	85 81       	ldd	r24, Z+5	; 0x05
     64e:	8f 93       	push	r24
     650:	84 81       	ldd	r24, Z+4	; 0x04
     652:	8f 93       	push	r24
     654:	83 81       	ldd	r24, Z+3	; 0x03
     656:	8f 93       	push	r24
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	8f 93       	push	r24
     65c:	81 81       	ldd	r24, Z+1	; 0x01
     65e:	8f 93       	push	r24
     660:	80 81       	ld	r24, Z
     662:	8f 93       	push	r24
     664:	8d ef       	ldi	r24, 0xFD	; 253
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	ce 01       	movw	r24, r28
     66e:	41 96       	adiw	r24, 0x11	; 17
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 4f 08 	call	0x109e	; 0x109e <sprintf>
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	}
	
	lcd_puts2(buf1); 
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts2>
	lcd_pos(1,0); 
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_pos>
	lcd_puts2(buf2);
     692:	ce 01       	movw	r24, r28
     694:	41 96       	adiw	r24, 0x11	; 17
     696:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_puts2>
}
     69a:	a6 96       	adiw	r28, 0x26	; 38
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	08 95       	ret

000006bc <update_edit_time_state>:



void update_edit_time_state() {
	if (EDIT_TIME_STATE == EDIT_TIME_ON) {
     6bc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <EDIT_TIME_STATE>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	59 f4       	brne	.+22     	; 0x6da <update_edit_time_state+0x1e>
		EDIT_TIME_STATE = EDIT_TIME_OFF;
     6c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <EDIT_TIME_STATE>
		EDIT_TIME_POSITION = 0;
     6c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <EDIT_TIME_POSITION+0x1>
     6cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <EDIT_TIME_POSITION>
		EDIT_TIME_CURRENT_TIME = 0;
     6d0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     6d4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     6d8:	08 95       	ret
	}
	else {
		EDIT_TIME_STATE = EDIT_TIME_ON;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <EDIT_TIME_STATE>
     6e0:	08 95       	ret

000006e2 <set_time>:
	}
}

void set_time(struct datetime *time) {
	if (EDIT_TIME_POSITION == 0) { // hours
     6e2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <EDIT_TIME_POSITION>
     6e6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <EDIT_TIME_POSITION+0x1>
     6ea:	21 15       	cp	r18, r1
     6ec:	31 05       	cpc	r19, r1
     6ee:	59 f4       	brne	.+22     	; 0x706 <set_time+0x24>
		if (EDIT_TIME_CURRENT_TIME < 24) {
     6f0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     6f4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     6f8:	28 31       	cpi	r18, 0x18	; 24
     6fa:	31 05       	cpc	r19, r1
     6fc:	fc f4       	brge	.+62     	; 0x73c <set_time+0x5a>
			time->hour = EDIT_TIME_CURRENT_TIME;
     6fe:	fc 01       	movw	r30, r24
     700:	31 83       	std	Z+1, r19	; 0x01
     702:	20 83       	st	Z, r18
     704:	08 95       	ret
		}
	}
	else if (EDIT_TIME_POSITION == 1) { // minutes
     706:	21 30       	cpi	r18, 0x01	; 1
     708:	31 05       	cpc	r19, r1
     70a:	59 f4       	brne	.+22     	; 0x722 <set_time+0x40>
		if (EDIT_TIME_CURRENT_TIME < 60) {
     70c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     710:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     714:	2c 33       	cpi	r18, 0x3C	; 60
     716:	31 05       	cpc	r19, r1
     718:	8c f4       	brge	.+34     	; 0x73c <set_time+0x5a>
			time->minute = EDIT_TIME_CURRENT_TIME;
     71a:	fc 01       	movw	r30, r24
     71c:	33 83       	std	Z+3, r19	; 0x03
     71e:	22 83       	std	Z+2, r18	; 0x02
     720:	08 95       	ret
		}
	}
	else if (EDIT_TIME_POSITION == 2) { // seconds
     722:	22 30       	cpi	r18, 0x02	; 2
     724:	31 05       	cpc	r19, r1
     726:	51 f4       	brne	.+20     	; 0x73c <set_time+0x5a>
		if (EDIT_TIME_CURRENT_TIME < 60) {
     728:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     72c:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     730:	2c 33       	cpi	r18, 0x3C	; 60
     732:	31 05       	cpc	r19, r1
     734:	1c f4       	brge	.+6      	; 0x73c <set_time+0x5a>
			time->second = EDIT_TIME_CURRENT_TIME;
     736:	fc 01       	movw	r30, r24
     738:	35 83       	std	Z+5, r19	; 0x05
     73a:	24 83       	std	Z+4, r18	; 0x04
     73c:	08 95       	ret

0000073e <update_current_time>:
		}
	}
}

void update_current_time(int key) {
	int num = keypad[key] - 48;
     73e:	8e 57       	subi	r24, 0x7E	; 126
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	80 81       	ld	r24, Z
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	c0 97       	sbiw	r24, 0x30	; 48
	if (num >= 0 && num <= 9) {
     74a:	8a 30       	cpi	r24, 0x0A	; 10
     74c:	91 05       	cpc	r25, r1
     74e:	c0 f4       	brcc	.+48     	; 0x780 <update_current_time+0x42>
		if (EDIT_TIME_CURRENT_TIME < 100) {
     750:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     754:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     758:	24 36       	cpi	r18, 0x64	; 100
     75a:	31 05       	cpc	r19, r1
     75c:	8c f4       	brge	.+34     	; 0x780 <update_current_time+0x42>
			EDIT_TIME_CURRENT_TIME = EDIT_TIME_CURRENT_TIME * 10 + num;
     75e:	a9 01       	movw	r20, r18
     760:	44 0f       	add	r20, r20
     762:	55 1f       	adc	r21, r21
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	24 0f       	add	r18, r20
     772:	35 1f       	adc	r19, r21
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     77c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     780:	08 95       	ret

00000782 <increment_edit_time_position>:
		}
	}
}

void increment_edit_time_position() {
	EDIT_TIME_CURRENT_TIME = 0;
     782:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     786:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <EDIT_TIME_CURRENT_TIME>
	if (EDIT_TIME_POSITION < 2) {
     78a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <EDIT_TIME_POSITION>
     78e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <EDIT_TIME_POSITION+0x1>
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	91 05       	cpc	r25, r1
     796:	2c f4       	brge	.+10     	; 0x7a2 <increment_edit_time_position+0x20>
		EDIT_TIME_POSITION ++;
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <EDIT_TIME_POSITION+0x1>
     79e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <EDIT_TIME_POSITION>
     7a2:	08 95       	ret

000007a4 <decrement_edit_time_position>:
	}
}

void decrement_edit_time_position() {
	EDIT_TIME_CURRENT_TIME = 0;
     7a4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     7a8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <EDIT_TIME_CURRENT_TIME>
	if (EDIT_TIME_POSITION > 0) {
     7ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <EDIT_TIME_POSITION>
     7b0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <EDIT_TIME_POSITION+0x1>
     7b4:	18 16       	cp	r1, r24
     7b6:	19 06       	cpc	r1, r25
     7b8:	2c f4       	brge	.+10     	; 0x7c4 <decrement_edit_time_position+0x20>
		EDIT_TIME_POSITION --;
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <EDIT_TIME_POSITION+0x1>
     7c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <EDIT_TIME_POSITION>
     7c4:	08 95       	ret

000007c6 <update_edit_alarm_state>:
	}
}

// Alarm Functions
void update_edit_alarm_state() {
	if (EDIT_ALARM_STATE ==  EDIT_ALARM_ON) {
     7c6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <EDIT_ALARM_STATE>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	59 f4       	brne	.+22     	; 0x7e4 <update_edit_alarm_state+0x1e>
		EDIT_ALARM_STATE = EDIT_ALARM_OFF;
     7ce:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <EDIT_ALARM_STATE>
		EDIT_TIME_POSITION = 0;
     7d2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <EDIT_TIME_POSITION+0x1>
     7d6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <EDIT_TIME_POSITION>
		EDIT_TIME_CURRENT_TIME = 0;
     7da:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <EDIT_TIME_CURRENT_TIME+0x1>
     7de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <EDIT_TIME_CURRENT_TIME>
     7e2:	08 95       	ret
	}
	else {
		EDIT_ALARM_STATE = EDIT_ALARM_ON;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <EDIT_ALARM_STATE>
     7ea:	08 95       	ret

000007ec <check_alarms>:
	}
}

void check_alarms() {
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
	for (int idx = 0; idx < MAX_RECORDED_TIMES; idx ++) {
		if (CLOCK_TIME.hour != 0 || CLOCK_TIME.minute != 0 || CLOCK_TIME.second != 0) {
     7fc:	e4 e5       	ldi	r30, 0x54	; 84
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	62 81       	ldd	r22, Z+2	; 0x02
     806:	73 81       	ldd	r23, Z+3	; 0x03
     808:	c4 81       	ldd	r28, Z+4	; 0x04
     80a:	d5 81       	ldd	r29, Z+5	; 0x05
     80c:	f0 90 52 01 	lds	r15, 0x0152	; 0x800152 <ALARM_SOUND_STATE>
     810:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <ALARM_NOTES_PLAYED>
     814:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <ALARM_NOTES_PLAYED+0x1>
     818:	e9 e2       	ldi	r30, 0x29	; 41
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	41 e5       	ldi	r20, 0x51	; 81
     81e:	51 e0       	ldi	r21, 0x01	; 1
			if (CLOCK_TIME.hour == ALARMS[idx].hour && CLOCK_TIME.minute == ALARMS[idx].minute && CLOCK_TIME.second == ALARMS[idx].second) {
				ALARM_SOUND_STATE = ON;
				ALARM_NOTES_PLAYED = 0;
     820:	c1 2c       	mov	r12, r1
     822:	d1 2c       	mov	r13, r1

void check_alarms() {
	for (int idx = 0; idx < MAX_RECORDED_TIMES; idx ++) {
		if (CLOCK_TIME.hour != 0 || CLOCK_TIME.minute != 0 || CLOCK_TIME.second != 0) {
			if (CLOCK_TIME.hour == ALARMS[idx].hour && CLOCK_TIME.minute == ALARMS[idx].minute && CLOCK_TIME.second == ALARMS[idx].second) {
				ALARM_SOUND_STATE = ON;
     824:	ee 24       	eor	r14, r14
     826:	e3 94       	inc	r14
	}
}

void check_alarms() {
	for (int idx = 0; idx < MAX_RECORDED_TIMES; idx ++) {
		if (CLOCK_TIME.hour != 0 || CLOCK_TIME.minute != 0 || CLOCK_TIME.second != 0) {
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	29 f4       	brne	.+10     	; 0x836 <check_alarms+0x4a>
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	11 f4       	brne	.+4      	; 0x836 <check_alarms+0x4a>
     832:	20 97       	sbiw	r28, 0x00	; 0
     834:	91 f0       	breq	.+36     	; 0x85a <check_alarms+0x6e>
			if (CLOCK_TIME.hour == ALARMS[idx].hour && CLOCK_TIME.minute == ALARMS[idx].minute && CLOCK_TIME.second == ALARMS[idx].second) {
     836:	20 81       	ld	r18, Z
     838:	31 81       	ldd	r19, Z+1	; 0x01
     83a:	82 17       	cp	r24, r18
     83c:	93 07       	cpc	r25, r19
     83e:	69 f4       	brne	.+26     	; 0x85a <check_alarms+0x6e>
     840:	22 81       	ldd	r18, Z+2	; 0x02
     842:	33 81       	ldd	r19, Z+3	; 0x03
     844:	62 17       	cp	r22, r18
     846:	73 07       	cpc	r23, r19
     848:	41 f4       	brne	.+16     	; 0x85a <check_alarms+0x6e>
     84a:	24 81       	ldd	r18, Z+4	; 0x04
     84c:	35 81       	ldd	r19, Z+5	; 0x05
     84e:	c2 17       	cp	r28, r18
     850:	d3 07       	cpc	r29, r19
     852:	19 f4       	brne	.+6      	; 0x85a <check_alarms+0x6e>
				ALARM_SOUND_STATE = ON;
				ALARM_NOTES_PLAYED = 0;
     854:	0c 2d       	mov	r16, r12
     856:	1d 2d       	mov	r17, r13

void check_alarms() {
	for (int idx = 0; idx < MAX_RECORDED_TIMES; idx ++) {
		if (CLOCK_TIME.hour != 0 || CLOCK_TIME.minute != 0 || CLOCK_TIME.second != 0) {
			if (CLOCK_TIME.hour == ALARMS[idx].hour && CLOCK_TIME.minute == ALARMS[idx].minute && CLOCK_TIME.second == ALARMS[idx].second) {
				ALARM_SOUND_STATE = ON;
     858:	fe 2c       	mov	r15, r14
     85a:	38 96       	adiw	r30, 0x08	; 8
		EDIT_ALARM_STATE = EDIT_ALARM_ON;
	}
}

void check_alarms() {
	for (int idx = 0; idx < MAX_RECORDED_TIMES; idx ++) {
     85c:	e4 17       	cp	r30, r20
     85e:	f5 07       	cpc	r31, r21
     860:	19 f7       	brne	.-58     	; 0x828 <check_alarms+0x3c>
     862:	f0 92 52 01 	sts	0x0152, r15	; 0x800152 <ALARM_SOUND_STATE>
     866:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <ALARM_NOTES_PLAYED>
     86a:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <ALARM_NOTES_PLAYED+0x1>
				ALARM_SOUND_STATE = ON;
				ALARM_NOTES_PLAYED = 0;
			}
		}
	}
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <alarm_increment_position>:

void  alarm_increment_position() {
	if (ALARMS_POSITION < 4) {
     880:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ALARMS_POSITION>
     884:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ALARMS_POSITION+0x1>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	91 05       	cpc	r25, r1
     88c:	2c f4       	brge	.+10     	; 0x898 <alarm_increment_position+0x18>
		ALARMS_POSITION ++;
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ALARMS_POSITION+0x1>
     894:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ALARMS_POSITION>
     898:	08 95       	ret

0000089a <alarm_decrement_position>:
	}
}

void alarm_decrement_position() {
	if (ALARMS_POSITION > 0) {
     89a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ALARMS_POSITION>
     89e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ALARMS_POSITION+0x1>
     8a2:	18 16       	cp	r1, r24
     8a4:	19 06       	cpc	r1, r25
     8a6:	2c f4       	brge	.+10     	; 0x8b2 <alarm_decrement_position+0x18>
		ALARMS_POSITION --;
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ALARMS_POSITION+0x1>
     8ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ALARMS_POSITION>
     8b2:	08 95       	ret

000008b4 <stopwatch_record_time>:
	}
}

// Stopwatch Functions
void stopwatch_record_time(struct datetime time) {
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	28 97       	sbiw	r28, 0x08	; 8
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	29 83       	std	Y+1, r18	; 0x01
     8ca:	3a 83       	std	Y+2, r19	; 0x02
     8cc:	4b 83       	std	Y+3, r20	; 0x03
     8ce:	5c 83       	std	Y+4, r21	; 0x04
     8d0:	6d 83       	std	Y+5, r22	; 0x05
     8d2:	7e 83       	std	Y+6, r23	; 0x06
     8d4:	8f 83       	std	Y+7, r24	; 0x07
     8d6:	98 87       	std	Y+8, r25	; 0x08
     8d8:	8e e5       	ldi	r24, 0x5E	; 94
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	4e e3       	ldi	r20, 0x3E	; 62
     8de:	51 e0       	ldi	r21, 0x01	; 1
	// Shift all values to end of array
	for (int idx = MAX_RECORDED_TIMES - 1; idx > 0; idx --) {
		STOPWATCH_RECORDED_TIMES[idx] = STOPWATCH_RECORDED_TIMES[idx - 1];
     8e0:	28 e0       	ldi	r18, 0x08	; 8
     8e2:	fc 01       	movw	r30, r24
     8e4:	78 96       	adiw	r30, 0x18	; 24
     8e6:	dc 01       	movw	r26, r24
     8e8:	90 96       	adiw	r26, 0x20	; 32
     8ea:	01 90       	ld	r0, Z+
     8ec:	0d 92       	st	X+, r0
     8ee:	2a 95       	dec	r18
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <stopwatch_record_time+0x36>
     8f2:	08 97       	sbiw	r24, 0x08	; 8
}

// Stopwatch Functions
void stopwatch_record_time(struct datetime time) {
	// Shift all values to end of array
	for (int idx = MAX_RECORDED_TIMES - 1; idx > 0; idx --) {
     8f4:	84 17       	cp	r24, r20
     8f6:	95 07       	cpc	r25, r21
     8f8:	99 f7       	brne	.-26     	; 0x8e0 <stopwatch_record_time+0x2c>
		STOPWATCH_RECORDED_TIMES[idx] = STOPWATCH_RECORDED_TIMES[idx - 1];
	}
	STOPWATCH_RECORDED_TIMES[0] = time;
     8fa:	88 e0       	ldi	r24, 0x08	; 8
     8fc:	fe 01       	movw	r30, r28
     8fe:	31 96       	adiw	r30, 0x01	; 1
     900:	ae e5       	ldi	r26, 0x5E	; 94
     902:	b1 e0       	ldi	r27, 0x01	; 1
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <stopwatch_record_time+0x50>
}
     90c:	28 96       	adiw	r28, 0x08	; 8
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <stopwatch_increment_record_position>:

void  stopwatch_increment_record_position() {
	if (STOPWATCH_RECORDED_TIMES_POSITION < 4) {
     91e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     922:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	91 05       	cpc	r25, r1
     92a:	2c f4       	brge	.+10     	; 0x936 <stopwatch_increment_record_position+0x18>
		STOPWATCH_RECORDED_TIMES_POSITION ++;
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
     932:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     936:	08 95       	ret

00000938 <stopwatch_decrement_record_position>:
	}
}

void stopwatch_decrement_record_position() {
	if (STOPWATCH_RECORDED_TIMES_POSITION > 0) {
     938:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     93c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     940:	18 16       	cp	r1, r24
     942:	19 06       	cpc	r1, r25
     944:	2c f4       	brge	.+10     	; 0x950 <stopwatch_decrement_record_position+0x18>
		STOPWATCH_RECORDED_TIMES_POSITION --;
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
     94c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     950:	08 95       	ret

00000952 <reset_stopwatch_state>:
	}
}

void reset_stopwatch_state() {
	STOPWATCH_STATE = STOPWATCH_STOPPED;
     952:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <STOPWATCH_STATE>
}


// Shared
void reset_datetime(struct datetime *time) {
	time->hour = 0;
     956:	e6 e8       	ldi	r30, 0x86	; 134
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	10 82       	st	Z, r1
	time->minute = 0;
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	12 82       	std	Z+2, r1	; 0x02
	time->second = 0;
     962:	15 82       	std	Z+5, r1	; 0x05
     964:	14 82       	std	Z+4, r1	; 0x04
	time->subsecond = 0;
     966:	17 82       	std	Z+7, r1	; 0x07
     968:	16 82       	std	Z+6, r1	; 0x06
     96a:	08 95       	ret

0000096c <reset_timer_state>:
}

// Timer Functions

void reset_timer_state() {
	TIMER_STATE = TIMER_STOPPED;
     96c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <TIMER_STATE>
}


// Shared
void reset_datetime(struct datetime *time) {
	time->hour = 0;
     970:	e0 e2       	ldi	r30, 0x20	; 32
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	11 82       	std	Z+1, r1	; 0x01
     976:	10 82       	st	Z, r1
	time->minute = 0;
     978:	13 82       	std	Z+3, r1	; 0x03
     97a:	12 82       	std	Z+2, r1	; 0x02
	time->second = 0;
     97c:	15 82       	std	Z+5, r1	; 0x05
     97e:	14 82       	std	Z+4, r1	; 0x04
	time->subsecond = 0;
     980:	17 82       	std	Z+7, r1	; 0x07
     982:	16 82       	std	Z+6, r1	; 0x06
     984:	08 95       	ret

00000986 <decrement_time>:
void reset_timer_state() {
	TIMER_STATE = TIMER_STOPPED;
	reset_datetime(&TIMER_TIME);
}

void decrement_time(struct datetime *time) {
     986:	fc 01       	movw	r30, r24
	if (time->subsecond <= 0) {
     988:	86 81       	ldd	r24, Z+6	; 0x06
     98a:	97 81       	ldd	r25, Z+7	; 0x07
     98c:	18 16       	cp	r1, r24
     98e:	19 06       	cpc	r1, r25
     990:	0c f4       	brge	.+2      	; 0x994 <decrement_time+0xe>
     992:	46 c0       	rjmp	.+140    	; 0xa20 <decrement_time+0x9a>
		if (time->second <= 0) {
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	95 81       	ldd	r25, Z+5	; 0x05
     998:	18 16       	cp	r1, r24
     99a:	19 06       	cpc	r1, r25
     99c:	24 f1       	brlt	.+72     	; 0x9e6 <decrement_time+0x60>
			if (time->minute <= 0) {
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	18 16       	cp	r1, r24
     9a4:	19 06       	cpc	r1, r25
     9a6:	9c f0       	brlt	.+38     	; 0x9ce <decrement_time+0x48>
				if (time->hour <= 0) {
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	18 16       	cp	r1, r24
     9ae:	19 06       	cpc	r1, r25
     9b0:	14 f5       	brge	.+68     	; 0x9f6 <decrement_time+0x70>
				}
				else { // time.hour > 0
					time->hour --;
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	80 83       	st	Z, r24
					time->minute = 59;
     9b8:	8b e3       	ldi	r24, 0x3B	; 59
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	93 83       	std	Z+3, r25	; 0x03
     9be:	82 83       	std	Z+2, r24	; 0x02
					time->second = 59;
     9c0:	95 83       	std	Z+5, r25	; 0x05
     9c2:	84 83       	std	Z+4, r24	; 0x04
					time->subsecond = 10;
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	97 83       	std	Z+7, r25	; 0x07
     9ca:	86 83       	std	Z+6, r24	; 0x06
     9cc:	29 c0       	rjmp	.+82     	; 0xa20 <decrement_time+0x9a>
				}
			}
			else { // time.minute > 0
				time->minute --;
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	93 83       	std	Z+3, r25	; 0x03
     9d2:	82 83       	std	Z+2, r24	; 0x02
				time->second = 59;
     9d4:	8b e3       	ldi	r24, 0x3B	; 59
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	95 83       	std	Z+5, r25	; 0x05
     9da:	84 83       	std	Z+4, r24	; 0x04
				time->subsecond = 10;
     9dc:	8a e0       	ldi	r24, 0x0A	; 10
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	97 83       	std	Z+7, r25	; 0x07
     9e2:	86 83       	std	Z+6, r24	; 0x06
     9e4:	1d c0       	rjmp	.+58     	; 0xa20 <decrement_time+0x9a>
			}
		}
		else { // time.second > 0
			time->second --;
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	95 83       	std	Z+5, r25	; 0x05
     9ea:	84 83       	std	Z+4, r24	; 0x04
			time->subsecond = 10;
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	97 83       	std	Z+7, r25	; 0x07
     9f2:	86 83       	std	Z+6, r24	; 0x06
     9f4:	15 c0       	rjmp	.+42     	; 0xa20 <decrement_time+0x9a>
	if (time->subsecond > 0) {
		time->subsecond --;
	}
	
	// Use this to act as a flag to trigger alarm with subsecond as -1
	if (time->subsecond == 0 && time->second == 0 && time->minute == 0 && time->hour == 0) {
     9f6:	86 81       	ldd	r24, Z+6	; 0x06
     9f8:	97 81       	ldd	r25, Z+7	; 0x07
     9fa:	89 2b       	or	r24, r25
     9fc:	b9 f4       	brne	.+46     	; 0xa2c <decrement_time+0xa6>
     9fe:	84 81       	ldd	r24, Z+4	; 0x04
     a00:	95 81       	ldd	r25, Z+5	; 0x05
     a02:	89 2b       	or	r24, r25
     a04:	99 f4       	brne	.+38     	; 0xa2c <decrement_time+0xa6>
     a06:	82 81       	ldd	r24, Z+2	; 0x02
     a08:	93 81       	ldd	r25, Z+3	; 0x03
     a0a:	89 2b       	or	r24, r25
     a0c:	79 f4       	brne	.+30     	; 0xa2c <decrement_time+0xa6>
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	89 2b       	or	r24, r25
     a14:	59 f4       	brne	.+22     	; 0xa2c <decrement_time+0xa6>
		time->subsecond --;
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	97 83       	std	Z+7, r25	; 0x07
     a1c:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
     a1e:	08 95       	ret
			time->subsecond = 10;
		}
	}
	
	if (time->subsecond > 0) {
		time->subsecond --;
     a20:	86 81       	ldd	r24, Z+6	; 0x06
     a22:	97 81       	ldd	r25, Z+7	; 0x07
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	97 83       	std	Z+7, r25	; 0x07
     a28:	86 83       	std	Z+6, r24	; 0x06
     a2a:	e5 cf       	rjmp	.-54     	; 0x9f6 <decrement_time+0x70>
     a2c:	08 95       	ret

00000a2e <update_edit_frequency_state>:
	
}


void update_edit_frequency_state() {
	if (EDIT_FREQUENCY_STATE ==  EDIT_FREQUENCY_ON) {
     a2e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <EDIT_FREQUENCY_STATE>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	19 f4       	brne	.+6      	; 0xa3c <update_edit_frequency_state+0xe>
		EDIT_FREQUENCY_STATE = EDIT_FREQUENCY_OFF;
     a36:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <EDIT_FREQUENCY_STATE>
     a3a:	08 95       	ret
	}
	else {
		EDIT_FREQUENCY_STATE = EDIT_FREQUENCY_ON;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <EDIT_FREQUENCY_STATE>
     a42:	08 95       	ret

00000a44 <update_edit_clock_state>:
	}
}

void update_edit_clock_state() {
	if (EDIT_CLOCK_STATE ==  EDIT_CLOCK_ON) {
     a44:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <EDIT_CLOCK_STATE>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	19 f4       	brne	.+6      	; 0xa52 <update_edit_clock_state+0xe>
		EDIT_CLOCK_STATE = EDIT_CLOCK_OFF;
     a4c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <EDIT_CLOCK_STATE>
     a50:	08 95       	ret
	}
	else {
		EDIT_CLOCK_STATE = EDIT_CLOCK_ON;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <EDIT_CLOCK_STATE>
     a58:	08 95       	ret

00000a5a <main>:
	}
}

int main(void)
{
	DDRB = 0x08;
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	87 bb       	out	0x17, r24	; 23
	avr_init();
     a5e:	0e 94 49 00 	call	0x92	; 0x92 <avr_init>
	lcd_init();
     a62:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_init>
		if (EDIT_CLOCK_STATE == EDIT_CLOCK_ON) {
			if (keypad[key] == '1'){
				CLOCK_STATE = ALARM;
			}
			else if (keypad[key] == '2'){
				CLOCK_STATE = STOP_WATCH;
     a66:	ff 24       	eor	r15, r15
     a68:	f3 94       	inc	r15
			}
			else if (keypad[key] == '3'){
				CLOCK_STATE = TIMER;
     a6a:	02 e0       	ldi	r16, 0x02	; 2
		if (EDIT_CLOCK_STATE == EDIT_CLOCK_ON) {
			if (keypad[key] == '1'){
				CLOCK_STATE = ALARM;
			}
			else if (keypad[key] == '2'){
				CLOCK_STATE = STOP_WATCH;
     a6c:	1f 2d       	mov	r17, r15
	DDRB = 0x08;
	avr_init();
	lcd_init();
	
    while (1)  {
		int key = get_key() - 1;
     a6e:	0e 94 10 01 	call	0x220	; 0x220 <get_key>
     a72:	ec 01       	movw	r28, r24
     a74:	21 97       	sbiw	r28, 0x01	; 1
     a76:	68 f0       	brcs	.+26     	; 0xa92 <main+0x38>
		if (key == -1) {
			// Do Nothing
		}
		else if (keypad[key] == 'A') { // edit clock state
     a78:	fe 01       	movw	r30, r28
     a7a:	ee 57       	subi	r30, 0x7E	; 126
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	80 81       	ld	r24, Z
     a80:	81 34       	cpi	r24, 0x41	; 65
     a82:	19 f4       	brne	.+6      	; 0xa8a <main+0x30>
			update_edit_clock_state();
     a84:	0e 94 22 05 	call	0xa44	; 0xa44 <update_edit_clock_state>
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <main+0x38>
		}
		else if (keypad[key] == 'B') { // edit frequency state
     a8a:	82 34       	cpi	r24, 0x42	; 66
     a8c:	11 f4       	brne	.+4      	; 0xa92 <main+0x38>
			update_edit_frequency_state();
     a8e:	0e 94 17 05 	call	0xa2e	; 0xa2e <update_edit_frequency_state>
		}
		
		// UPDATE CLOCK STATE
		if (EDIT_CLOCK_STATE == EDIT_CLOCK_ON) {
     a92:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <EDIT_CLOCK_STATE>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	99 f4       	brne	.+38     	; 0xac0 <main+0x66>
			if (keypad[key] == '1'){
     a9a:	fe 01       	movw	r30, r28
     a9c:	ee 57       	subi	r30, 0x7E	; 126
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	80 81       	ld	r24, Z
     aa2:	81 33       	cpi	r24, 0x31	; 49
     aa4:	19 f4       	brne	.+6      	; 0xaac <main+0x52>
				CLOCK_STATE = ALARM;
     aa6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <CLOCK_STATE>
     aaa:	1f c0       	rjmp	.+62     	; 0xaea <main+0x90>
			}
			else if (keypad[key] == '2'){
     aac:	82 33       	cpi	r24, 0x32	; 50
     aae:	19 f4       	brne	.+6      	; 0xab6 <main+0x5c>
				CLOCK_STATE = STOP_WATCH;
     ab0:	10 93 51 01 	sts	0x0151, r17	; 0x800151 <CLOCK_STATE>
     ab4:	7f c0       	rjmp	.+254    	; 0xbb4 <main+0x15a>
			}
			else if (keypad[key] == '3'){
     ab6:	83 33       	cpi	r24, 0x33	; 51
     ab8:	19 f4       	brne	.+6      	; 0xac0 <main+0x66>
				CLOCK_STATE = TIMER;
     aba:	00 93 51 01 	sts	0x0151, r16	; 0x800151 <CLOCK_STATE>
     abe:	7a c0       	rjmp	.+244    	; 0xbb4 <main+0x15a>
			}
		}
		
		// UPDATE FREQUENCY STATE
		if (EDIT_FREQUENCY_STATE == EDIT_FREQUENCY_ON) {
     ac0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <EDIT_FREQUENCY_STATE>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	69 f4       	brne	.+26     	; 0xae2 <main+0x88>
			if (keypad[key] == '*'){
     ac8:	fe 01       	movw	r30, r28
     aca:	ee 57       	subi	r30, 0x7E	; 126
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	8a 32       	cpi	r24, 0x2A	; 42
     ad2:	19 f4       	brne	.+6      	; 0xada <main+0x80>
				decrement_current_frequency();
     ad4:	0e 94 c5 01 	call	0x38a	; 0x38a <decrement_current_frequency>
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <main+0x88>
			}
			else if (keypad[key] == '#'){
     ada:	83 32       	cpi	r24, 0x23	; 35
     adc:	11 f4       	brne	.+4      	; 0xae2 <main+0x88>
				increment_current_frequency();
     ade:	0e 94 b8 01 	call	0x370	; 0x370 <increment_current_frequency>
			}
		}
		
		
		// UPDATE ALARM
		if (CLOCK_STATE == ALARM) {
     ae2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CLOCK_STATE>
     ae6:	81 11       	cpse	r24, r1
     ae8:	65 c0       	rjmp	.+202    	; 0xbb4 <main+0x15a>
			if (keypad[key] == 'C') { 
     aea:	fe 01       	movw	r30, r28
     aec:	ee 57       	subi	r30, 0x7E	; 126
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	80 81       	ld	r24, Z
     af2:	83 34       	cpi	r24, 0x43	; 67
     af4:	19 f4       	brne	.+6      	; 0xafc <main+0xa2>
				update_edit_alarm_state(); // ADD ALARM
     af6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <update_edit_alarm_state>
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <main+0xaa>
			}
			else if (keypad[key] == 'D') {
     afc:	84 34       	cpi	r24, 0x44	; 68
     afe:	11 f4       	brne	.+4      	; 0xb04 <main+0xaa>
				update_edit_time_state(); // EDIT TIME
     b00:	0e 94 5e 03 	call	0x6bc	; 0x6bc <update_edit_time_state>
			}

			if (EDIT_TIME_STATE == EDIT_TIME_ON) {
     b04:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <EDIT_TIME_STATE>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	d9 f4       	brne	.+54     	; 0xb42 <main+0xe8>
				if (key != -1) {
     b0c:	cf 3f       	cpi	r28, 0xFF	; 255
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	d8 07       	cpc	r29, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <main+0xbc>
     b14:	4f c0       	rjmp	.+158    	; 0xbb4 <main+0x15a>
					if (keypad[key] == '*') {
     b16:	fe 01       	movw	r30, r28
     b18:	ee 57       	subi	r30, 0x7E	; 126
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	80 81       	ld	r24, Z
     b1e:	8a 32       	cpi	r24, 0x2A	; 42
     b20:	19 f4       	brne	.+6      	; 0xb28 <main+0xce>
						decrement_edit_time_position();
     b22:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <decrement_edit_time_position>
     b26:	46 c0       	rjmp	.+140    	; 0xbb4 <main+0x15a>
					}
					else if (keypad[key] == '#') {
     b28:	83 32       	cpi	r24, 0x23	; 35
     b2a:	19 f4       	brne	.+6      	; 0xb32 <main+0xd8>
						increment_edit_time_position();
     b2c:	0e 94 c1 03 	call	0x782	; 0x782 <increment_edit_time_position>
     b30:	41 c0       	rjmp	.+130    	; 0xbb4 <main+0x15a>
					}
					else {
						update_current_time(key);
     b32:	ce 01       	movw	r24, r28
     b34:	0e 94 9f 03 	call	0x73e	; 0x73e <update_current_time>
						set_time(&CLOCK_TIME);
     b38:	84 e5       	ldi	r24, 0x54	; 84
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <set_time>
     b40:	39 c0       	rjmp	.+114    	; 0xbb4 <main+0x15a>
					}
				}
			}
			else if (EDIT_ALARM_STATE == EDIT_ALARM_ON) {
     b42:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <EDIT_ALARM_STATE>
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	21 f5       	brne	.+72     	; 0xb92 <main+0x138>
				if (key != -1) {
     b4a:	cf 3f       	cpi	r28, 0xFF	; 255
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	d2 07       	cpc	r29, r18
     b50:	89 f1       	breq	.+98     	; 0xbb4 <main+0x15a>
					if (keypad[key] == '*') {
     b52:	fe 01       	movw	r30, r28
     b54:	ee 57       	subi	r30, 0x7E	; 126
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	80 81       	ld	r24, Z
     b5a:	8a 32       	cpi	r24, 0x2A	; 42
     b5c:	19 f4       	brne	.+6      	; 0xb64 <main+0x10a>
						decrement_edit_time_position();
     b5e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <decrement_edit_time_position>
     b62:	28 c0       	rjmp	.+80     	; 0xbb4 <main+0x15a>
					}
					else if (keypad[key] == '#') {
     b64:	83 32       	cpi	r24, 0x23	; 35
     b66:	19 f4       	brne	.+6      	; 0xb6e <main+0x114>
						increment_edit_time_position();
     b68:	0e 94 c1 03 	call	0x782	; 0x782 <increment_edit_time_position>
     b6c:	23 c0       	rjmp	.+70     	; 0xbb4 <main+0x15a>
					}
					else {
						update_current_time(key);
     b6e:	ce 01       	movw	r24, r28
     b70:	0e 94 9f 03 	call	0x73e	; 0x73e <update_current_time>
						set_time(&ALARMS[ALARMS_POSITION]);
     b74:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ALARMS_POSITION>
     b78:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ALARMS_POSITION+0x1>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	87 5d       	subi	r24, 0xD7	; 215
     b8a:	9e 4f       	sbci	r25, 0xFE	; 254
     b8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <set_time>
     b90:	11 c0       	rjmp	.+34     	; 0xbb4 <main+0x15a>
					}
				}
			}
			else {
				if (EDIT_FREQUENCY_STATE == EDIT_FREQUENCY_OFF) {
     b92:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <EDIT_FREQUENCY_STATE>
     b96:	81 11       	cpse	r24, r1
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <main+0x15a>
					if (keypad[key] == '*') {
     b9a:	fe 01       	movw	r30, r28
     b9c:	ee 57       	subi	r30, 0x7E	; 126
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	80 81       	ld	r24, Z
     ba2:	8a 32       	cpi	r24, 0x2A	; 42
     ba4:	19 f4       	brne	.+6      	; 0xbac <main+0x152>
						alarm_decrement_position();; // decrement position
     ba6:	0e 94 4d 04 	call	0x89a	; 0x89a <alarm_decrement_position>
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <main+0x15a>
					}
					else if (keypad[key] == '#') {
     bac:	83 32       	cpi	r24, 0x23	; 35
     bae:	11 f4       	brne	.+4      	; 0xbb4 <main+0x15a>
						alarm_increment_position();; // increment position
     bb0:	0e 94 40 04 	call	0x880	; 0x880 <alarm_increment_position>
			}
		}
		
		
		// UPDATE STOPWATCH
		if (CLOCK_STATE == STOP_WATCH) {
     bb4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CLOCK_STATE>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 f5       	brne	.+100    	; 0xc20 <main+0x1c6>
			if (keypad[key] == '1') {
     bbc:	fe 01       	movw	r30, r28
     bbe:	ee 57       	subi	r30, 0x7E	; 126
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	81 33       	cpi	r24, 0x31	; 49
     bc6:	19 f4       	brne	.+6      	; 0xbce <main+0x174>
				STOPWATCH_STATE = STOPWATCH_RUNNING; // START/RESUME
     bc8:	10 93 5c 01 	sts	0x015C, r17	; 0x80015c <STOPWATCH_STATE>
     bcc:	69 c0       	rjmp	.+210    	; 0xca0 <main+0x246>
			}
			else if (keypad[key] == '2') {
     bce:	82 33       	cpi	r24, 0x32	; 50
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <main+0x17e>
				STOPWATCH_STATE = STOPWATCH_STOPPED; // PAUSE
     bd2:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <STOPWATCH_STATE>
     bd6:	64 c0       	rjmp	.+200    	; 0xca0 <main+0x246>
			}
			else if (keypad[key] == '3') {
     bd8:	83 33       	cpi	r24, 0x33	; 51
     bda:	19 f4       	brne	.+6      	; 0xbe2 <main+0x188>
				reset_stopwatch_state(); // RESET
     bdc:	0e 94 a9 04 	call	0x952	; 0x952 <reset_stopwatch_state>
     be0:	1f c0       	rjmp	.+62     	; 0xc20 <main+0x1c6>
			}
			else if (keypad[key] == '4') {
     be2:	84 33       	cpi	r24, 0x34	; 52
     be4:	99 f4       	brne	.+38     	; 0xc0c <main+0x1b2>
				stopwatch_record_time(STOPWATCH_TIME); // RECORD
     be6:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <STOPWATCH_TIME>
     bea:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <STOPWATCH_TIME+0x1>
     bee:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <STOPWATCH_TIME+0x2>
     bf2:	50 91 89 01 	lds	r21, 0x0189	; 0x800189 <STOPWATCH_TIME+0x3>
     bf6:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <STOPWATCH_TIME+0x4>
     bfa:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <STOPWATCH_TIME+0x5>
     bfe:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <STOPWATCH_TIME+0x6>
     c02:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <STOPWATCH_TIME+0x7>
     c06:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <stopwatch_record_time>
     c0a:	0a c0       	rjmp	.+20     	; 0xc20 <main+0x1c6>
			}
			else if (keypad[key] == '*') {
     c0c:	8a 32       	cpi	r24, 0x2A	; 42
     c0e:	19 f4       	brne	.+6      	; 0xc16 <main+0x1bc>
				stopwatch_decrement_record_position();; // decrement position
     c10:	0e 94 9c 04 	call	0x938	; 0x938 <stopwatch_decrement_record_position>
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <main+0x1c6>
			}
			else if (keypad[key] == '#') {
     c16:	83 32       	cpi	r24, 0x23	; 35
     c18:	09 f0       	breq	.+2      	; 0xc1c <main+0x1c2>
     c1a:	42 c0       	rjmp	.+132    	; 0xca0 <main+0x246>
				stopwatch_increment_record_position();; // increment position
     c1c:	0e 94 8f 04 	call	0x91e	; 0x91e <stopwatch_increment_record_position>
		}
		
		
		
		// UPDATE TIMER
		if (CLOCK_STATE == TIMER){
     c20:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CLOCK_STATE>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	e1 f5       	brne	.+120    	; 0xca0 <main+0x246>
			
			if (keypad[key] == 'D') {
     c28:	fe 01       	movw	r30, r28
     c2a:	ee 57       	subi	r30, 0x7E	; 126
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 81       	ld	r24, Z
     c30:	84 34       	cpi	r24, 0x44	; 68
     c32:	11 f4       	brne	.+4      	; 0xc38 <main+0x1de>
				update_edit_time_state(); // EDIT TIME
     c34:	0e 94 5e 03 	call	0x6bc	; 0x6bc <update_edit_time_state>
			}
			
			if (EDIT_TIME_STATE == EDIT_TIME_ON) {
     c38:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <EDIT_TIME_STATE>
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	d1 f4       	brne	.+52     	; 0xc74 <main+0x21a>
				if (key != -1) {
     c40:	cf 3f       	cpi	r28, 0xFF	; 255
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	d8 07       	cpc	r29, r24
     c46:	61 f1       	breq	.+88     	; 0xca0 <main+0x246>
					if (keypad[key] == '*') {
     c48:	fe 01       	movw	r30, r28
     c4a:	ee 57       	subi	r30, 0x7E	; 126
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	80 81       	ld	r24, Z
     c50:	8a 32       	cpi	r24, 0x2A	; 42
     c52:	19 f4       	brne	.+6      	; 0xc5a <main+0x200>
						decrement_edit_time_position();
     c54:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <decrement_edit_time_position>
     c58:	23 c0       	rjmp	.+70     	; 0xca0 <main+0x246>
					}
					else if (keypad[key] == '#') {
     c5a:	83 32       	cpi	r24, 0x23	; 35
     c5c:	19 f4       	brne	.+6      	; 0xc64 <main+0x20a>
						increment_edit_time_position();
     c5e:	0e 94 c1 03 	call	0x782	; 0x782 <increment_edit_time_position>
     c62:	1e c0       	rjmp	.+60     	; 0xca0 <main+0x246>
					}
					else {
						update_current_time(key);
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 9f 03 	call	0x73e	; 0x73e <update_current_time>
						set_time(&TIMER_TIME);
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <set_time>
     c72:	16 c0       	rjmp	.+44     	; 0xca0 <main+0x246>
					}
				}
			}
			else { // EDIT_TIME_OFF
				if (keypad[key] == '1') {
     c74:	fe 01       	movw	r30, r28
     c76:	ee 57       	subi	r30, 0x7E	; 126
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	80 81       	ld	r24, Z
     c7c:	81 33       	cpi	r24, 0x31	; 49
     c7e:	19 f4       	brne	.+6      	; 0xc86 <main+0x22c>
					TIMER_STATE = TIMER_RUNNING; // START/RESUME
     c80:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <TIMER_STATE>
     c84:	0d c0       	rjmp	.+26     	; 0xca0 <main+0x246>
				}
				else if (keypad[key] == '2') {
     c86:	82 33       	cpi	r24, 0x32	; 50
     c88:	29 f4       	brne	.+10     	; 0xc94 <main+0x23a>
					TIMER_STATE = TIMER_STOPPED; // PAUSE
     c8a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <TIMER_STATE>
					ALARM_SOUND_STATE = OFF;
     c8e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <ALARM_SOUND_STATE>
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <main+0x246>
				}
				else if (keypad[key] == '3') {
     c94:	83 33       	cpi	r24, 0x33	; 51
     c96:	21 f4       	brne	.+8      	; 0xca0 <main+0x246>
					reset_timer_state(); // RESET
     c98:	0e 94 b6 04 	call	0x96c	; 0x96c <reset_timer_state>
					ALARM_SOUND_STATE = OFF;
     c9c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <ALARM_SOUND_STATE>
			}
		}
		
		
		
		display_lcd();
     ca0:	0e 94 00 02 	call	0x400	; 0x400 <display_lcd>
		
		if (ALARM_SOUND_STATE == ON) {
     ca4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ALARM_SOUND_STATE>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	f1 f4       	brne	.+60     	; 0xce8 <main+0x28e>
			play_alarm_note();
     cac:	0e 94 a1 01 	call	0x342	; 0x342 <play_alarm_note>
			ALARM_NOTES_PLAYED ++;
     cb0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ALARM_NOTES_PLAYED>
     cb4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <ALARM_NOTES_PLAYED+0x1>
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ALARM_NOTES_PLAYED+0x1>
     cbe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ALARM_NOTES_PLAYED>
			if (ALARM_NOTES_PLAYED == MAX_ALARM_NOTES || keypad[key] == '1') {
     cc2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <MAX_ALARM_NOTES>
     cc6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <MAX_ALARM_NOTES+0x1>
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	29 f0       	breq	.+10     	; 0xcda <main+0x280>
     cd0:	ce 57       	subi	r28, 0x7E	; 126
     cd2:	df 4f       	sbci	r29, 0xFF	; 255
     cd4:	88 81       	ld	r24, Y
     cd6:	81 33       	cpi	r24, 0x31	; 49
     cd8:	59 f4       	brne	.+22     	; 0xcf0 <main+0x296>
				ALARM_SOUND_STATE = OFF;
     cda:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <ALARM_SOUND_STATE>
				ALARM_NOTES_PLAYED = 0;
     cde:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ALARM_NOTES_PLAYED+0x1>
     ce2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <ALARM_NOTES_PLAYED>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <main+0x296>
			else if (keypad[key] == '2') {
				
			}
		}
		else {
			avr_wait(100);
     ce8:	84 e6       	ldi	r24, 0x64	; 100
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 4c 00 	call	0x98	; 0x98 <avr_wait>
		}
		
		increment_time(&CLOCK_TIME);
     cf0:	84 e5       	ldi	r24, 0x54	; 84
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <increment_time>
		
		check_alarms();
     cf8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <check_alarms>
		
		if (STOPWATCH_STATE == STOPWATCH_RUNNING) {
     cfc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STOPWATCH_STATE>
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	21 f4       	brne	.+8      	; 0xd0c <main+0x2b2>
			increment_time(&STOPWATCH_TIME);
     d04:	86 e8       	ldi	r24, 0x86	; 134
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <increment_time>
		}
		
		if (TIMER_STATE == TIMER_RUNNING) {
     d0c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TIMER_STATE>
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <main+0x2bc>
     d14:	ac ce       	rjmp	.-680    	; 0xa6e <main+0x14>
			decrement_time(&TIMER_TIME);
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 c3 04 	call	0x986	; 0x986 <decrement_time>
			if (TIMER_TIME.subsecond == -1) {
     d1e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TIMER_TIME+0x6>
     d22:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <TIMER_TIME+0x7>
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	09 f0       	breq	.+2      	; 0xd2c <main+0x2d2>
     d2a:	a1 ce       	rjmp	.-702    	; 0xa6e <main+0x14>
				ALARM_SOUND_STATE = ON;
     d2c:	f0 92 52 01 	sts	0x0152, r15	; 0x800152 <ALARM_SOUND_STATE>
     d30:	9e ce       	rjmp	.-708    	; 0xa6e <main+0x14>

00000d32 <ceil>:
     d32:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_trunc>
     d36:	90 f0       	brcs	.+36     	; 0xd5c <ceil+0x2a>
     d38:	9f 37       	cpi	r25, 0x7F	; 127
     d3a:	48 f4       	brcc	.+18     	; 0xd4e <ceil+0x1c>
     d3c:	91 11       	cpse	r25, r1
     d3e:	16 f4       	brtc	.+4      	; 0xd44 <ceil+0x12>
     d40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	9f e3       	ldi	r25, 0x3F	; 63
     d4c:	08 95       	ret
     d4e:	26 f0       	brts	.+8      	; 0xd58 <ceil+0x26>
     d50:	1b 16       	cp	r1, r27
     d52:	61 1d       	adc	r22, r1
     d54:	71 1d       	adc	r23, r1
     d56:	81 1d       	adc	r24, r1
     d58:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_mintl>
     d5c:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_mpack>

00000d60 <__divsf3>:
     d60:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3x>
     d64:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__fp_round>
     d68:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_pscB>
     d6c:	58 f0       	brcs	.+22     	; 0xd84 <__divsf3+0x24>
     d6e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_pscA>
     d72:	40 f0       	brcs	.+16     	; 0xd84 <__divsf3+0x24>
     d74:	29 f4       	brne	.+10     	; 0xd80 <__divsf3+0x20>
     d76:	5f 3f       	cpi	r21, 0xFF	; 255
     d78:	29 f0       	breq	.+10     	; 0xd84 <__divsf3+0x24>
     d7a:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
     d7e:	51 11       	cpse	r21, r1
     d80:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     d84:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_nan>

00000d88 <__divsf3x>:
     d88:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_split3>
     d8c:	68 f3       	brcs	.-38     	; 0xd68 <__divsf3+0x8>

00000d8e <__divsf3_pse>:
     d8e:	99 23       	and	r25, r25
     d90:	b1 f3       	breq	.-20     	; 0xd7e <__divsf3+0x1e>
     d92:	55 23       	and	r21, r21
     d94:	91 f3       	breq	.-28     	; 0xd7a <__divsf3+0x1a>
     d96:	95 1b       	sub	r25, r21
     d98:	55 0b       	sbc	r21, r21
     d9a:	bb 27       	eor	r27, r27
     d9c:	aa 27       	eor	r26, r26
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	38 f0       	brcs	.+14     	; 0xdb4 <__divsf3_pse+0x26>
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	44 1f       	adc	r20, r20
     db0:	aa 1f       	adc	r26, r26
     db2:	a9 f3       	breq	.-22     	; 0xd9e <__divsf3_pse+0x10>
     db4:	35 d0       	rcall	.+106    	; 0xe20 <__divsf3_pse+0x92>
     db6:	0e 2e       	mov	r0, r30
     db8:	3a f0       	brmi	.+14     	; 0xdc8 <__divsf3_pse+0x3a>
     dba:	e0 e8       	ldi	r30, 0x80	; 128
     dbc:	32 d0       	rcall	.+100    	; 0xe22 <__divsf3_pse+0x94>
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	50 40       	sbci	r21, 0x00	; 0
     dc2:	e6 95       	lsr	r30
     dc4:	00 1c       	adc	r0, r0
     dc6:	ca f7       	brpl	.-14     	; 0xdba <__divsf3_pse+0x2c>
     dc8:	2b d0       	rcall	.+86     	; 0xe20 <__divsf3_pse+0x92>
     dca:	fe 2f       	mov	r31, r30
     dcc:	29 d0       	rcall	.+82     	; 0xe20 <__divsf3_pse+0x92>
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	bb 1f       	adc	r27, r27
     dd6:	26 17       	cp	r18, r22
     dd8:	37 07       	cpc	r19, r23
     dda:	48 07       	cpc	r20, r24
     ddc:	ab 07       	cpc	r26, r27
     dde:	b0 e8       	ldi	r27, 0x80	; 128
     de0:	09 f0       	breq	.+2      	; 0xde4 <__divsf3_pse+0x56>
     de2:	bb 0b       	sbc	r27, r27
     de4:	80 2d       	mov	r24, r0
     de6:	bf 01       	movw	r22, r30
     de8:	ff 27       	eor	r31, r31
     dea:	93 58       	subi	r25, 0x83	; 131
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	3a f0       	brmi	.+14     	; 0xdfe <__divsf3_pse+0x70>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	78 f0       	brcs	.+30     	; 0xe14 <__divsf3_pse+0x86>
     df6:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_inf>
     dfa:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     dfe:	5f 3f       	cpi	r21, 0xFF	; 255
     e00:	e4 f3       	brlt	.-8      	; 0xdfa <__divsf3_pse+0x6c>
     e02:	98 3e       	cpi	r25, 0xE8	; 232
     e04:	d4 f3       	brlt	.-12     	; 0xdfa <__divsf3_pse+0x6c>
     e06:	86 95       	lsr	r24
     e08:	77 95       	ror	r23
     e0a:	67 95       	ror	r22
     e0c:	b7 95       	ror	r27
     e0e:	f7 95       	ror	r31
     e10:	9f 5f       	subi	r25, 0xFF	; 255
     e12:	c9 f7       	brne	.-14     	; 0xe06 <__divsf3_pse+0x78>
     e14:	88 0f       	add	r24, r24
     e16:	91 1d       	adc	r25, r1
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	97 f9       	bld	r25, 7
     e1e:	08 95       	ret
     e20:	e1 e0       	ldi	r30, 0x01	; 1
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	88 1f       	adc	r24, r24
     e28:	bb 1f       	adc	r27, r27
     e2a:	62 17       	cp	r22, r18
     e2c:	73 07       	cpc	r23, r19
     e2e:	84 07       	cpc	r24, r20
     e30:	ba 07       	cpc	r27, r26
     e32:	20 f0       	brcs	.+8      	; 0xe3c <__divsf3_pse+0xae>
     e34:	62 1b       	sub	r22, r18
     e36:	73 0b       	sbc	r23, r19
     e38:	84 0b       	sbc	r24, r20
     e3a:	ba 0b       	sbc	r27, r26
     e3c:	ee 1f       	adc	r30, r30
     e3e:	88 f7       	brcc	.-30     	; 0xe22 <__divsf3_pse+0x94>
     e40:	e0 95       	com	r30
     e42:	08 95       	ret

00000e44 <__fixsfsi>:
     e44:	0e 94 29 07 	call	0xe52	; 0xe52 <__fixunssfsi>
     e48:	68 94       	set
     e4a:	b1 11       	cpse	r27, r1
     e4c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     e50:	08 95       	ret

00000e52 <__fixunssfsi>:
     e52:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_splitA>
     e56:	88 f0       	brcs	.+34     	; 0xe7a <__fixunssfsi+0x28>
     e58:	9f 57       	subi	r25, 0x7F	; 127
     e5a:	98 f0       	brcs	.+38     	; 0xe82 <__fixunssfsi+0x30>
     e5c:	b9 2f       	mov	r27, r25
     e5e:	99 27       	eor	r25, r25
     e60:	b7 51       	subi	r27, 0x17	; 23
     e62:	b0 f0       	brcs	.+44     	; 0xe90 <__fixunssfsi+0x3e>
     e64:	e1 f0       	breq	.+56     	; 0xe9e <__fixunssfsi+0x4c>
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	1a f0       	brmi	.+6      	; 0xe76 <__fixunssfsi+0x24>
     e70:	ba 95       	dec	r27
     e72:	c9 f7       	brne	.-14     	; 0xe66 <__fixunssfsi+0x14>
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <__fixunssfsi+0x4c>
     e76:	b1 30       	cpi	r27, 0x01	; 1
     e78:	91 f0       	breq	.+36     	; 0xe9e <__fixunssfsi+0x4c>
     e7a:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_zero>
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	08 95       	ret
     e82:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_zero>
     e86:	67 2f       	mov	r22, r23
     e88:	78 2f       	mov	r23, r24
     e8a:	88 27       	eor	r24, r24
     e8c:	b8 5f       	subi	r27, 0xF8	; 248
     e8e:	39 f0       	breq	.+14     	; 0xe9e <__fixunssfsi+0x4c>
     e90:	b9 3f       	cpi	r27, 0xF9	; 249
     e92:	cc f3       	brlt	.-14     	; 0xe86 <__fixunssfsi+0x34>
     e94:	86 95       	lsr	r24
     e96:	77 95       	ror	r23
     e98:	67 95       	ror	r22
     e9a:	b3 95       	inc	r27
     e9c:	d9 f7       	brne	.-10     	; 0xe94 <__fixunssfsi+0x42>
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__fixunssfsi+0x5c>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	08 95       	ret

00000eb0 <__floatunsisf>:
     eb0:	e8 94       	clt
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <__floatsisf+0x12>

00000eb4 <__floatsisf>:
     eb4:	97 fb       	bst	r25, 7
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__floatsisf+0x12>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	99 23       	and	r25, r25
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <__floatsisf+0x40>
     eca:	f9 2f       	mov	r31, r25
     ecc:	96 e9       	ldi	r25, 0x96	; 150
     ece:	bb 27       	eor	r27, r27
     ed0:	93 95       	inc	r25
     ed2:	f6 95       	lsr	r31
     ed4:	87 95       	ror	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b7 95       	ror	r27
     edc:	f1 11       	cpse	r31, r1
     ede:	f8 cf       	rjmp	.-16     	; 0xed0 <__floatsisf+0x1c>
     ee0:	fa f4       	brpl	.+62     	; 0xf20 <__floatsisf+0x6c>
     ee2:	bb 0f       	add	r27, r27
     ee4:	11 f4       	brne	.+4      	; 0xeea <__floatsisf+0x36>
     ee6:	60 ff       	sbrs	r22, 0
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <__floatsisf+0x6c>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <__floatsisf+0x6c>
     ef4:	88 23       	and	r24, r24
     ef6:	11 f0       	breq	.+4      	; 0xefc <__floatsisf+0x48>
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <__floatsisf+0x6a>
     efc:	77 23       	and	r23, r23
     efe:	21 f0       	breq	.+8      	; 0xf08 <__floatsisf+0x54>
     f00:	9e e8       	ldi	r25, 0x8E	; 142
     f02:	87 2f       	mov	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__floatsisf+0x5e>
     f08:	66 23       	and	r22, r22
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__floatsisf+0x74>
     f0c:	96 e8       	ldi	r25, 0x86	; 134
     f0e:	86 2f       	mov	r24, r22
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	2a f0       	brmi	.+10     	; 0xf20 <__floatsisf+0x6c>
     f16:	9a 95       	dec	r25
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	da f7       	brpl	.-10     	; 0xf16 <__floatsisf+0x62>
     f20:	88 0f       	add	r24, r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__fp_inf>:
     f2a:	97 f9       	bld	r25, 7
     f2c:	9f 67       	ori	r25, 0x7F	; 127
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	08 95       	ret

00000f36 <__fp_mintl>:
     f36:	88 23       	and	r24, r24
     f38:	71 f4       	brne	.+28     	; 0xf56 <__fp_mintl+0x20>
     f3a:	77 23       	and	r23, r23
     f3c:	21 f0       	breq	.+8      	; 0xf46 <__fp_mintl+0x10>
     f3e:	98 50       	subi	r25, 0x08	; 8
     f40:	87 2b       	or	r24, r23
     f42:	76 2f       	mov	r23, r22
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <__fp_mintl+0x1e>
     f46:	66 23       	and	r22, r22
     f48:	11 f4       	brne	.+4      	; 0xf4e <__fp_mintl+0x18>
     f4a:	99 27       	eor	r25, r25
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <__fp_mintl+0x32>
     f4e:	90 51       	subi	r25, 0x10	; 16
     f50:	86 2b       	or	r24, r22
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	2a f0       	brmi	.+10     	; 0xf62 <__fp_mintl+0x2c>
     f58:	9a 95       	dec	r25
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	da f7       	brpl	.-10     	; 0xf58 <__fp_mintl+0x22>
     f62:	88 0f       	add	r24, r24
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	97 f9       	bld	r25, 7
     f6a:	08 95       	ret

00000f6c <__fp_mpack>:
     f6c:	9f 3f       	cpi	r25, 0xFF	; 255
     f6e:	31 f0       	breq	.+12     	; 0xf7c <__fp_mpack_finite+0xc>

00000f70 <__fp_mpack_finite>:
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	20 f4       	brcc	.+8      	; 0xf7c <__fp_mpack_finite+0xc>
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	88 0f       	add	r24, r24
     f7e:	91 1d       	adc	r25, r1
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret

00000f88 <__fp_nan>:
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	80 ec       	ldi	r24, 0xC0	; 192
     f8c:	08 95       	ret

00000f8e <__fp_pscA>:
     f8e:	00 24       	eor	r0, r0
     f90:	0a 94       	dec	r0
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	18 06       	cpc	r1, r24
     f98:	09 06       	cpc	r0, r25
     f9a:	08 95       	ret

00000f9c <__fp_pscB>:
     f9c:	00 24       	eor	r0, r0
     f9e:	0a 94       	dec	r0
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	14 06       	cpc	r1, r20
     fa6:	05 06       	cpc	r0, r21
     fa8:	08 95       	ret

00000faa <__fp_round>:
     faa:	09 2e       	mov	r0, r25
     fac:	03 94       	inc	r0
     fae:	00 0c       	add	r0, r0
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <__fp_round+0xc>
     fb2:	88 23       	and	r24, r24
     fb4:	52 f0       	brmi	.+20     	; 0xfca <__fp_round+0x20>
     fb6:	bb 0f       	add	r27, r27
     fb8:	40 f4       	brcc	.+16     	; 0xfca <__fp_round+0x20>
     fba:	bf 2b       	or	r27, r31
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__fp_round+0x18>
     fbe:	60 ff       	sbrs	r22, 0
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__fp_round+0x20>
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__fp_split3>:
     fcc:	57 fd       	sbrc	r21, 7
     fce:	90 58       	subi	r25, 0x80	; 128
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	59 f0       	breq	.+22     	; 0xfec <__fp_splitA+0x10>
     fd6:	5f 3f       	cpi	r21, 0xFF	; 255
     fd8:	71 f0       	breq	.+28     	; 0xff6 <__fp_splitA+0x1a>
     fda:	47 95       	ror	r20

00000fdc <__fp_splitA>:
     fdc:	88 0f       	add	r24, r24
     fde:	97 fb       	bst	r25, 7
     fe0:	99 1f       	adc	r25, r25
     fe2:	61 f0       	breq	.+24     	; 0xffc <__fp_splitA+0x20>
     fe4:	9f 3f       	cpi	r25, 0xFF	; 255
     fe6:	79 f0       	breq	.+30     	; 0x1006 <__fp_splitA+0x2a>
     fe8:	87 95       	ror	r24
     fea:	08 95       	ret
     fec:	12 16       	cp	r1, r18
     fee:	13 06       	cpc	r1, r19
     ff0:	14 06       	cpc	r1, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	f2 cf       	rjmp	.-28     	; 0xfda <__fp_split3+0xe>
     ff6:	46 95       	lsr	r20
     ff8:	f1 df       	rcall	.-30     	; 0xfdc <__fp_splitA>
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <__fp_splitA+0x30>
     ffc:	16 16       	cp	r1, r22
     ffe:	17 06       	cpc	r1, r23
    1000:	18 06       	cpc	r1, r24
    1002:	99 1f       	adc	r25, r25
    1004:	f1 cf       	rjmp	.-30     	; 0xfe8 <__fp_splitA+0xc>
    1006:	86 95       	lsr	r24
    1008:	71 05       	cpc	r23, r1
    100a:	61 05       	cpc	r22, r1
    100c:	08 94       	sec
    100e:	08 95       	ret

00001010 <__fp_trunc>:
    1010:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_splitA>
    1014:	a0 f0       	brcs	.+40     	; 0x103e <__fp_trunc+0x2e>
    1016:	be e7       	ldi	r27, 0x7E	; 126
    1018:	b9 17       	cp	r27, r25
    101a:	88 f4       	brcc	.+34     	; 0x103e <__fp_trunc+0x2e>
    101c:	bb 27       	eor	r27, r27
    101e:	9f 38       	cpi	r25, 0x8F	; 143
    1020:	60 f4       	brcc	.+24     	; 0x103a <__fp_trunc+0x2a>
    1022:	16 16       	cp	r1, r22
    1024:	b1 1d       	adc	r27, r1
    1026:	67 2f       	mov	r22, r23
    1028:	78 2f       	mov	r23, r24
    102a:	88 27       	eor	r24, r24
    102c:	98 5f       	subi	r25, 0xF8	; 248
    102e:	f7 cf       	rjmp	.-18     	; 0x101e <__fp_trunc+0xe>
    1030:	86 95       	lsr	r24
    1032:	77 95       	ror	r23
    1034:	67 95       	ror	r22
    1036:	b1 1d       	adc	r27, r1
    1038:	93 95       	inc	r25
    103a:	96 39       	cpi	r25, 0x96	; 150
    103c:	c8 f3       	brcs	.-14     	; 0x1030 <__fp_trunc+0x20>
    103e:	08 95       	ret

00001040 <__fp_zero>:
    1040:	e8 94       	clt

00001042 <__fp_szero>:
    1042:	bb 27       	eor	r27, r27
    1044:	66 27       	eor	r22, r22
    1046:	77 27       	eor	r23, r23
    1048:	cb 01       	movw	r24, r22
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret

0000104e <__divmodhi4>:
    104e:	97 fb       	bst	r25, 7
    1050:	07 2e       	mov	r0, r23
    1052:	16 f4       	brtc	.+4      	; 0x1058 <__divmodhi4+0xa>
    1054:	00 94       	com	r0
    1056:	07 d0       	rcall	.+14     	; 0x1066 <__divmodhi4_neg1>
    1058:	77 fd       	sbrc	r23, 7
    105a:	09 d0       	rcall	.+18     	; 0x106e <__divmodhi4_neg2>
    105c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__udivmodhi4>
    1060:	07 fc       	sbrc	r0, 7
    1062:	05 d0       	rcall	.+10     	; 0x106e <__divmodhi4_neg2>
    1064:	3e f4       	brtc	.+14     	; 0x1074 <__divmodhi4_exit>

00001066 <__divmodhi4_neg1>:
    1066:	90 95       	com	r25
    1068:	81 95       	neg	r24
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__divmodhi4_neg2>:
    106e:	70 95       	com	r23
    1070:	61 95       	neg	r22
    1072:	7f 4f       	sbci	r23, 0xFF	; 255

00001074 <__divmodhi4_exit>:
    1074:	08 95       	ret

00001076 <__udivmodhi4>:
    1076:	aa 1b       	sub	r26, r26
    1078:	bb 1b       	sub	r27, r27
    107a:	51 e1       	ldi	r21, 0x11	; 17
    107c:	07 c0       	rjmp	.+14     	; 0x108c <__udivmodhi4_ep>

0000107e <__udivmodhi4_loop>:
    107e:	aa 1f       	adc	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	a6 17       	cp	r26, r22
    1084:	b7 07       	cpc	r27, r23
    1086:	10 f0       	brcs	.+4      	; 0x108c <__udivmodhi4_ep>
    1088:	a6 1b       	sub	r26, r22
    108a:	b7 0b       	sbc	r27, r23

0000108c <__udivmodhi4_ep>:
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	5a 95       	dec	r21
    1092:	a9 f7       	brne	.-22     	; 0x107e <__udivmodhi4_loop>
    1094:	80 95       	com	r24
    1096:	90 95       	com	r25
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	08 95       	ret

0000109e <sprintf>:
    109e:	ae e0       	ldi	r26, 0x0E	; 14
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f8 e0       	ldi	r31, 0x08	; 8
    10a6:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__prologue_saves__+0x1c>
    10aa:	0d 89       	ldd	r16, Y+21	; 0x15
    10ac:	1e 89       	ldd	r17, Y+22	; 0x16
    10ae:	86 e0       	ldi	r24, 0x06	; 6
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	1a 83       	std	Y+2, r17	; 0x02
    10b4:	09 83       	std	Y+1, r16	; 0x01
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f e7       	ldi	r25, 0x7F	; 127
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	ae 01       	movw	r20, r28
    10c0:	47 5e       	subi	r20, 0xE7	; 231
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	6f 89       	ldd	r22, Y+23	; 0x17
    10c6:	78 8d       	ldd	r23, Y+24	; 0x18
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vfprintf>
    10d0:	ef 81       	ldd	r30, Y+7	; 0x07
    10d2:	f8 85       	ldd	r31, Y+8	; 0x08
    10d4:	e0 0f       	add	r30, r16
    10d6:	f1 1f       	adc	r31, r17
    10d8:	10 82       	st	Z, r1
    10da:	2e 96       	adiw	r28, 0x0e	; 14
    10dc:	e4 e0       	ldi	r30, 0x04	; 4
    10de:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__epilogue_restores__+0x1c>

000010e2 <vfprintf>:
    10e2:	ab e0       	ldi	r26, 0x0B	; 11
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e7       	ldi	r30, 0x77	; 119
    10e8:	f8 e0       	ldi	r31, 0x08	; 8
    10ea:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__>
    10ee:	6c 01       	movw	r12, r24
    10f0:	7b 01       	movw	r14, r22
    10f2:	8a 01       	movw	r16, r20
    10f4:	fc 01       	movw	r30, r24
    10f6:	17 82       	std	Z+7, r1	; 0x07
    10f8:	16 82       	std	Z+6, r1	; 0x06
    10fa:	83 81       	ldd	r24, Z+3	; 0x03
    10fc:	81 ff       	sbrs	r24, 1
    10fe:	cc c1       	rjmp	.+920    	; 0x1498 <vfprintf+0x3b6>
    1100:	ce 01       	movw	r24, r28
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	3c 01       	movw	r6, r24
    1106:	f6 01       	movw	r30, r12
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	f7 01       	movw	r30, r14
    110c:	93 fd       	sbrc	r25, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	93 ff       	sbrs	r25, 3
    1112:	81 91       	ld	r24, Z+
    1114:	7f 01       	movw	r14, r30
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <vfprintf+0x3a>
    111a:	ba c1       	rjmp	.+884    	; 0x1490 <vfprintf+0x3ae>
    111c:	85 32       	cpi	r24, 0x25	; 37
    111e:	39 f4       	brne	.+14     	; 0x112e <vfprintf+0x4c>
    1120:	93 fd       	sbrc	r25, 3
    1122:	85 91       	lpm	r24, Z+
    1124:	93 ff       	sbrs	r25, 3
    1126:	81 91       	ld	r24, Z+
    1128:	7f 01       	movw	r14, r30
    112a:	85 32       	cpi	r24, 0x25	; 37
    112c:	29 f4       	brne	.+10     	; 0x1138 <vfprintf+0x56>
    112e:	b6 01       	movw	r22, r12
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1136:	e7 cf       	rjmp	.-50     	; 0x1106 <vfprintf+0x24>
    1138:	91 2c       	mov	r9, r1
    113a:	21 2c       	mov	r2, r1
    113c:	31 2c       	mov	r3, r1
    113e:	ff e1       	ldi	r31, 0x1F	; 31
    1140:	f3 15       	cp	r31, r3
    1142:	d8 f0       	brcs	.+54     	; 0x117a <vfprintf+0x98>
    1144:	8b 32       	cpi	r24, 0x2B	; 43
    1146:	79 f0       	breq	.+30     	; 0x1166 <vfprintf+0x84>
    1148:	38 f4       	brcc	.+14     	; 0x1158 <vfprintf+0x76>
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	79 f0       	breq	.+30     	; 0x116c <vfprintf+0x8a>
    114e:	83 32       	cpi	r24, 0x23	; 35
    1150:	a1 f4       	brne	.+40     	; 0x117a <vfprintf+0x98>
    1152:	23 2d       	mov	r18, r3
    1154:	20 61       	ori	r18, 0x10	; 16
    1156:	1d c0       	rjmp	.+58     	; 0x1192 <vfprintf+0xb0>
    1158:	8d 32       	cpi	r24, 0x2D	; 45
    115a:	61 f0       	breq	.+24     	; 0x1174 <vfprintf+0x92>
    115c:	80 33       	cpi	r24, 0x30	; 48
    115e:	69 f4       	brne	.+26     	; 0x117a <vfprintf+0x98>
    1160:	23 2d       	mov	r18, r3
    1162:	21 60       	ori	r18, 0x01	; 1
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <vfprintf+0xb0>
    1166:	83 2d       	mov	r24, r3
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	38 2e       	mov	r3, r24
    116c:	e3 2d       	mov	r30, r3
    116e:	e4 60       	ori	r30, 0x04	; 4
    1170:	3e 2e       	mov	r3, r30
    1172:	2a c0       	rjmp	.+84     	; 0x11c8 <vfprintf+0xe6>
    1174:	f3 2d       	mov	r31, r3
    1176:	f8 60       	ori	r31, 0x08	; 8
    1178:	1d c0       	rjmp	.+58     	; 0x11b4 <vfprintf+0xd2>
    117a:	37 fc       	sbrc	r3, 7
    117c:	2d c0       	rjmp	.+90     	; 0x11d8 <vfprintf+0xf6>
    117e:	20 ed       	ldi	r18, 0xD0	; 208
    1180:	28 0f       	add	r18, r24
    1182:	2a 30       	cpi	r18, 0x0A	; 10
    1184:	40 f0       	brcs	.+16     	; 0x1196 <vfprintf+0xb4>
    1186:	8e 32       	cpi	r24, 0x2E	; 46
    1188:	b9 f4       	brne	.+46     	; 0x11b8 <vfprintf+0xd6>
    118a:	36 fc       	sbrc	r3, 6
    118c:	81 c1       	rjmp	.+770    	; 0x1490 <vfprintf+0x3ae>
    118e:	23 2d       	mov	r18, r3
    1190:	20 64       	ori	r18, 0x40	; 64
    1192:	32 2e       	mov	r3, r18
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <vfprintf+0xe6>
    1196:	36 fe       	sbrs	r3, 6
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0xc4>
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	98 9e       	mul	r9, r24
    119e:	20 0d       	add	r18, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	92 2e       	mov	r9, r18
    11a4:	11 c0       	rjmp	.+34     	; 0x11c8 <vfprintf+0xe6>
    11a6:	ea e0       	ldi	r30, 0x0A	; 10
    11a8:	2e 9e       	mul	r2, r30
    11aa:	20 0d       	add	r18, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	22 2e       	mov	r2, r18
    11b0:	f3 2d       	mov	r31, r3
    11b2:	f0 62       	ori	r31, 0x20	; 32
    11b4:	3f 2e       	mov	r3, r31
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <vfprintf+0xe6>
    11b8:	8c 36       	cpi	r24, 0x6C	; 108
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <vfprintf+0xe2>
    11bc:	83 2d       	mov	r24, r3
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	38 2e       	mov	r3, r24
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0xe6>
    11c4:	88 36       	cpi	r24, 0x68	; 104
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <vfprintf+0xf6>
    11c8:	f7 01       	movw	r30, r14
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	7f 01       	movw	r14, r30
    11d4:	81 11       	cpse	r24, r1
    11d6:	b3 cf       	rjmp	.-154    	; 0x113e <vfprintf+0x5c>
    11d8:	98 2f       	mov	r25, r24
    11da:	9f 7d       	andi	r25, 0xDF	; 223
    11dc:	95 54       	subi	r25, 0x45	; 69
    11de:	93 30       	cpi	r25, 0x03	; 3
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <vfprintf+0x10a>
    11e2:	0c 5f       	subi	r16, 0xFC	; 252
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	9f e3       	ldi	r25, 0x3F	; 63
    11e8:	99 83       	std	Y+1, r25	; 0x01
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <vfprintf+0x124>
    11ec:	83 36       	cpi	r24, 0x63	; 99
    11ee:	31 f0       	breq	.+12     	; 0x11fc <vfprintf+0x11a>
    11f0:	83 37       	cpi	r24, 0x73	; 115
    11f2:	71 f0       	breq	.+28     	; 0x1210 <vfprintf+0x12e>
    11f4:	83 35       	cpi	r24, 0x53	; 83
    11f6:	09 f0       	breq	.+2      	; 0x11fa <vfprintf+0x118>
    11f8:	59 c0       	rjmp	.+178    	; 0x12ac <vfprintf+0x1ca>
    11fa:	21 c0       	rjmp	.+66     	; 0x123e <vfprintf+0x15c>
    11fc:	f8 01       	movw	r30, r16
    11fe:	80 81       	ld	r24, Z
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	0e 5f       	subi	r16, 0xFE	; 254
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	88 24       	eor	r8, r8
    1208:	83 94       	inc	r8
    120a:	91 2c       	mov	r9, r1
    120c:	53 01       	movw	r10, r6
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <vfprintf+0x154>
    1210:	28 01       	movw	r4, r16
    1212:	f2 e0       	ldi	r31, 0x02	; 2
    1214:	4f 0e       	add	r4, r31
    1216:	51 1c       	adc	r5, r1
    1218:	f8 01       	movw	r30, r16
    121a:	a0 80       	ld	r10, Z
    121c:	b1 80       	ldd	r11, Z+1	; 0x01
    121e:	36 fe       	sbrs	r3, 6
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <vfprintf+0x146>
    1222:	69 2d       	mov	r22, r9
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x14a>
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	7f ef       	ldi	r23, 0xFF	; 255
    122c:	c5 01       	movw	r24, r10
    122e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <strnlen>
    1232:	4c 01       	movw	r8, r24
    1234:	82 01       	movw	r16, r4
    1236:	f3 2d       	mov	r31, r3
    1238:	ff 77       	andi	r31, 0x7F	; 127
    123a:	3f 2e       	mov	r3, r31
    123c:	16 c0       	rjmp	.+44     	; 0x126a <vfprintf+0x188>
    123e:	28 01       	movw	r4, r16
    1240:	22 e0       	ldi	r18, 0x02	; 2
    1242:	42 0e       	add	r4, r18
    1244:	51 1c       	adc	r5, r1
    1246:	f8 01       	movw	r30, r16
    1248:	a0 80       	ld	r10, Z
    124a:	b1 80       	ldd	r11, Z+1	; 0x01
    124c:	36 fe       	sbrs	r3, 6
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x174>
    1250:	69 2d       	mov	r22, r9
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x178>
    1256:	6f ef       	ldi	r22, 0xFF	; 255
    1258:	7f ef       	ldi	r23, 0xFF	; 255
    125a:	c5 01       	movw	r24, r10
    125c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <strnlen_P>
    1260:	4c 01       	movw	r8, r24
    1262:	f3 2d       	mov	r31, r3
    1264:	f0 68       	ori	r31, 0x80	; 128
    1266:	3f 2e       	mov	r3, r31
    1268:	82 01       	movw	r16, r4
    126a:	33 fc       	sbrc	r3, 3
    126c:	1b c0       	rjmp	.+54     	; 0x12a4 <vfprintf+0x1c2>
    126e:	82 2d       	mov	r24, r2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	88 16       	cp	r8, r24
    1274:	99 06       	cpc	r9, r25
    1276:	b0 f4       	brcc	.+44     	; 0x12a4 <vfprintf+0x1c2>
    1278:	b6 01       	movw	r22, r12
    127a:	80 e2       	ldi	r24, 0x20	; 32
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1282:	2a 94       	dec	r2
    1284:	f4 cf       	rjmp	.-24     	; 0x126e <vfprintf+0x18c>
    1286:	f5 01       	movw	r30, r10
    1288:	37 fc       	sbrc	r3, 7
    128a:	85 91       	lpm	r24, Z+
    128c:	37 fe       	sbrs	r3, 7
    128e:	81 91       	ld	r24, Z+
    1290:	5f 01       	movw	r10, r30
    1292:	b6 01       	movw	r22, r12
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    129a:	21 10       	cpse	r2, r1
    129c:	2a 94       	dec	r2
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	82 1a       	sub	r8, r18
    12a2:	91 08       	sbc	r9, r1
    12a4:	81 14       	cp	r8, r1
    12a6:	91 04       	cpc	r9, r1
    12a8:	71 f7       	brne	.-36     	; 0x1286 <vfprintf+0x1a4>
    12aa:	e8 c0       	rjmp	.+464    	; 0x147c <vfprintf+0x39a>
    12ac:	84 36       	cpi	r24, 0x64	; 100
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <vfprintf+0x1d2>
    12b0:	89 36       	cpi	r24, 0x69	; 105
    12b2:	41 f5       	brne	.+80     	; 0x1304 <vfprintf+0x222>
    12b4:	f8 01       	movw	r30, r16
    12b6:	37 fe       	sbrs	r3, 7
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <vfprintf+0x1e6>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	0c 5f       	subi	r16, 0xFC	; 252
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x1f6>
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	07 2e       	mov	r0, r23
    12ce:	00 0c       	add	r0, r0
    12d0:	88 0b       	sbc	r24, r24
    12d2:	99 0b       	sbc	r25, r25
    12d4:	0e 5f       	subi	r16, 0xFE	; 254
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	f3 2d       	mov	r31, r3
    12da:	ff 76       	andi	r31, 0x6F	; 111
    12dc:	3f 2e       	mov	r3, r31
    12de:	97 ff       	sbrs	r25, 7
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <vfprintf+0x212>
    12e2:	90 95       	com	r25
    12e4:	80 95       	com	r24
    12e6:	70 95       	com	r23
    12e8:	61 95       	neg	r22
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	f0 68       	ori	r31, 0x80	; 128
    12f2:	3f 2e       	mov	r3, r31
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a3 01       	movw	r20, r6
    12fa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    12fe:	88 2e       	mov	r8, r24
    1300:	86 18       	sub	r8, r6
    1302:	45 c0       	rjmp	.+138    	; 0x138e <vfprintf+0x2ac>
    1304:	85 37       	cpi	r24, 0x75	; 117
    1306:	31 f4       	brne	.+12     	; 0x1314 <vfprintf+0x232>
    1308:	23 2d       	mov	r18, r3
    130a:	2f 7e       	andi	r18, 0xEF	; 239
    130c:	b2 2e       	mov	r11, r18
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	25 c0       	rjmp	.+74     	; 0x135e <vfprintf+0x27c>
    1314:	93 2d       	mov	r25, r3
    1316:	99 7f       	andi	r25, 0xF9	; 249
    1318:	b9 2e       	mov	r11, r25
    131a:	8f 36       	cpi	r24, 0x6F	; 111
    131c:	c1 f0       	breq	.+48     	; 0x134e <vfprintf+0x26c>
    131e:	18 f4       	brcc	.+6      	; 0x1326 <vfprintf+0x244>
    1320:	88 35       	cpi	r24, 0x58	; 88
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0x260>
    1324:	b5 c0       	rjmp	.+362    	; 0x1490 <vfprintf+0x3ae>
    1326:	80 37       	cpi	r24, 0x70	; 112
    1328:	19 f0       	breq	.+6      	; 0x1330 <vfprintf+0x24e>
    132a:	88 37       	cpi	r24, 0x78	; 120
    132c:	21 f0       	breq	.+8      	; 0x1336 <vfprintf+0x254>
    132e:	b0 c0       	rjmp	.+352    	; 0x1490 <vfprintf+0x3ae>
    1330:	e9 2f       	mov	r30, r25
    1332:	e0 61       	ori	r30, 0x10	; 16
    1334:	be 2e       	mov	r11, r30
    1336:	b4 fe       	sbrs	r11, 4
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <vfprintf+0x272>
    133a:	fb 2d       	mov	r31, r11
    133c:	f4 60       	ori	r31, 0x04	; 4
    133e:	bf 2e       	mov	r11, r31
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x272>
    1342:	34 fe       	sbrs	r3, 4
    1344:	0a c0       	rjmp	.+20     	; 0x135a <vfprintf+0x278>
    1346:	29 2f       	mov	r18, r25
    1348:	26 60       	ori	r18, 0x06	; 6
    134a:	b2 2e       	mov	r11, r18
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x278>
    134e:	28 e0       	ldi	r18, 0x08	; 8
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	05 c0       	rjmp	.+10     	; 0x135e <vfprintf+0x27c>
    1354:	20 e1       	ldi	r18, 0x10	; 16
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x27c>
    135a:	20 e1       	ldi	r18, 0x10	; 16
    135c:	32 e0       	ldi	r19, 0x02	; 2
    135e:	f8 01       	movw	r30, r16
    1360:	b7 fe       	sbrs	r11, 7
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <vfprintf+0x290>
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0c 5f       	subi	r16, 0xFC	; 252
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	06 c0       	rjmp	.+12     	; 0x137e <vfprintf+0x29c>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 5f       	subi	r16, 0xFE	; 254
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	a3 01       	movw	r20, r6
    1380:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    1384:	88 2e       	mov	r8, r24
    1386:	86 18       	sub	r8, r6
    1388:	fb 2d       	mov	r31, r11
    138a:	ff 77       	andi	r31, 0x7F	; 127
    138c:	3f 2e       	mov	r3, r31
    138e:	36 fe       	sbrs	r3, 6
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <vfprintf+0x2ca>
    1392:	23 2d       	mov	r18, r3
    1394:	2e 7f       	andi	r18, 0xFE	; 254
    1396:	a2 2e       	mov	r10, r18
    1398:	89 14       	cp	r8, r9
    139a:	58 f4       	brcc	.+22     	; 0x13b2 <vfprintf+0x2d0>
    139c:	34 fe       	sbrs	r3, 4
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <vfprintf+0x2d4>
    13a0:	32 fc       	sbrc	r3, 2
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <vfprintf+0x2d4>
    13a4:	83 2d       	mov	r24, r3
    13a6:	8e 7e       	andi	r24, 0xEE	; 238
    13a8:	a8 2e       	mov	r10, r24
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <vfprintf+0x2d4>
    13ac:	b8 2c       	mov	r11, r8
    13ae:	a3 2c       	mov	r10, r3
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfprintf+0x2d6>
    13b2:	b8 2c       	mov	r11, r8
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x2d6>
    13b6:	b9 2c       	mov	r11, r9
    13b8:	a4 fe       	sbrs	r10, 4
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <vfprintf+0x2f8>
    13bc:	fe 01       	movw	r30, r28
    13be:	e8 0d       	add	r30, r8
    13c0:	f1 1d       	adc	r31, r1
    13c2:	80 81       	ld	r24, Z
    13c4:	80 33       	cpi	r24, 0x30	; 48
    13c6:	21 f4       	brne	.+8      	; 0x13d0 <vfprintf+0x2ee>
    13c8:	9a 2d       	mov	r25, r10
    13ca:	99 7e       	andi	r25, 0xE9	; 233
    13cc:	a9 2e       	mov	r10, r25
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <vfprintf+0x300>
    13d0:	a2 fe       	sbrs	r10, 2
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0x2fe>
    13d4:	b3 94       	inc	r11
    13d6:	b3 94       	inc	r11
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <vfprintf+0x300>
    13da:	8a 2d       	mov	r24, r10
    13dc:	86 78       	andi	r24, 0x86	; 134
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0x300>
    13e0:	b3 94       	inc	r11
    13e2:	a3 fc       	sbrc	r10, 3
    13e4:	11 c0       	rjmp	.+34     	; 0x1408 <vfprintf+0x326>
    13e6:	a0 fe       	sbrs	r10, 0
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0x314>
    13ea:	b2 14       	cp	r11, r2
    13ec:	88 f4       	brcc	.+34     	; 0x1410 <vfprintf+0x32e>
    13ee:	28 0c       	add	r2, r8
    13f0:	92 2c       	mov	r9, r2
    13f2:	9b 18       	sub	r9, r11
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <vfprintf+0x330>
    13f6:	b2 14       	cp	r11, r2
    13f8:	60 f4       	brcc	.+24     	; 0x1412 <vfprintf+0x330>
    13fa:	b6 01       	movw	r22, r12
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1404:	b3 94       	inc	r11
    1406:	f7 cf       	rjmp	.-18     	; 0x13f6 <vfprintf+0x314>
    1408:	b2 14       	cp	r11, r2
    140a:	18 f4       	brcc	.+6      	; 0x1412 <vfprintf+0x330>
    140c:	2b 18       	sub	r2, r11
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x332>
    1410:	98 2c       	mov	r9, r8
    1412:	21 2c       	mov	r2, r1
    1414:	a4 fe       	sbrs	r10, 4
    1416:	10 c0       	rjmp	.+32     	; 0x1438 <vfprintf+0x356>
    1418:	b6 01       	movw	r22, r12
    141a:	80 e3       	ldi	r24, 0x30	; 48
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1422:	a2 fe       	sbrs	r10, 2
    1424:	17 c0       	rjmp	.+46     	; 0x1454 <vfprintf+0x372>
    1426:	a1 fc       	sbrc	r10, 1
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <vfprintf+0x34e>
    142a:	88 e7       	ldi	r24, 0x78	; 120
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x352>
    1430:	88 e5       	ldi	r24, 0x58	; 88
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b6 01       	movw	r22, r12
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <vfprintf+0x36e>
    1438:	8a 2d       	mov	r24, r10
    143a:	86 78       	andi	r24, 0x86	; 134
    143c:	59 f0       	breq	.+22     	; 0x1454 <vfprintf+0x372>
    143e:	a1 fe       	sbrs	r10, 1
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x364>
    1442:	8b e2       	ldi	r24, 0x2B	; 43
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vfprintf+0x366>
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	a7 fc       	sbrc	r10, 7
    144a:	8d e2       	ldi	r24, 0x2D	; 45
    144c:	b6 01       	movw	r22, r12
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1454:	89 14       	cp	r8, r9
    1456:	38 f4       	brcc	.+14     	; 0x1466 <vfprintf+0x384>
    1458:	b6 01       	movw	r22, r12
    145a:	80 e3       	ldi	r24, 0x30	; 48
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1462:	9a 94       	dec	r9
    1464:	f7 cf       	rjmp	.-18     	; 0x1454 <vfprintf+0x372>
    1466:	8a 94       	dec	r8
    1468:	f3 01       	movw	r30, r6
    146a:	e8 0d       	add	r30, r8
    146c:	f1 1d       	adc	r31, r1
    146e:	80 81       	ld	r24, Z
    1470:	b6 01       	movw	r22, r12
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    1478:	81 10       	cpse	r8, r1
    147a:	f5 cf       	rjmp	.-22     	; 0x1466 <vfprintf+0x384>
    147c:	22 20       	and	r2, r2
    147e:	09 f4       	brne	.+2      	; 0x1482 <vfprintf+0x3a0>
    1480:	42 ce       	rjmp	.-892    	; 0x1106 <vfprintf+0x24>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <fputc>
    148c:	2a 94       	dec	r2
    148e:	f6 cf       	rjmp	.-20     	; 0x147c <vfprintf+0x39a>
    1490:	f6 01       	movw	r30, r12
    1492:	86 81       	ldd	r24, Z+6	; 0x06
    1494:	97 81       	ldd	r25, Z+7	; 0x07
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x3ba>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	2b 96       	adiw	r28, 0x0b	; 11
    149e:	e2 e1       	ldi	r30, 0x12	; 18
    14a0:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__>

000014a4 <strnlen_P>:
    14a4:	fc 01       	movw	r30, r24
    14a6:	05 90       	lpm	r0, Z+
    14a8:	61 50       	subi	r22, 0x01	; 1
    14aa:	70 40       	sbci	r23, 0x00	; 0
    14ac:	01 10       	cpse	r0, r1
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <strnlen_P+0x2>
    14b0:	80 95       	com	r24
    14b2:	90 95       	com	r25
    14b4:	8e 0f       	add	r24, r30
    14b6:	9f 1f       	adc	r25, r31
    14b8:	08 95       	ret

000014ba <strnlen>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	61 50       	subi	r22, 0x01	; 1
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	01 90       	ld	r0, Z+
    14c2:	01 10       	cpse	r0, r1
    14c4:	d8 f7       	brcc	.-10     	; 0x14bc <strnlen+0x2>
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	8e 0f       	add	r24, r30
    14cc:	9f 1f       	adc	r25, r31
    14ce:	08 95       	ret

000014d0 <fputc>:
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	fb 01       	movw	r30, r22
    14da:	23 81       	ldd	r18, Z+3	; 0x03
    14dc:	21 fd       	sbrc	r18, 1
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <fputc+0x16>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	9f ef       	ldi	r25, 0xFF	; 255
    14e4:	2c c0       	rjmp	.+88     	; 0x153e <fputc+0x6e>
    14e6:	22 ff       	sbrs	r18, 2
    14e8:	16 c0       	rjmp	.+44     	; 0x1516 <fputc+0x46>
    14ea:	46 81       	ldd	r20, Z+6	; 0x06
    14ec:	57 81       	ldd	r21, Z+7	; 0x07
    14ee:	24 81       	ldd	r18, Z+4	; 0x04
    14f0:	35 81       	ldd	r19, Z+5	; 0x05
    14f2:	42 17       	cp	r20, r18
    14f4:	53 07       	cpc	r21, r19
    14f6:	44 f4       	brge	.+16     	; 0x1508 <fputc+0x38>
    14f8:	a0 81       	ld	r26, Z
    14fa:	b1 81       	ldd	r27, Z+1	; 0x01
    14fc:	9d 01       	movw	r18, r26
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	20 83       	st	Z, r18
    1506:	8c 93       	st	X, r24
    1508:	26 81       	ldd	r18, Z+6	; 0x06
    150a:	37 81       	ldd	r19, Z+7	; 0x07
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	37 83       	std	Z+7, r19	; 0x07
    1512:	26 83       	std	Z+6, r18	; 0x06
    1514:	14 c0       	rjmp	.+40     	; 0x153e <fputc+0x6e>
    1516:	8b 01       	movw	r16, r22
    1518:	ec 01       	movw	r28, r24
    151a:	fb 01       	movw	r30, r22
    151c:	00 84       	ldd	r0, Z+8	; 0x08
    151e:	f1 85       	ldd	r31, Z+9	; 0x09
    1520:	e0 2d       	mov	r30, r0
    1522:	09 95       	icall
    1524:	89 2b       	or	r24, r25
    1526:	e1 f6       	brne	.-72     	; 0x14e0 <fputc+0x10>
    1528:	d8 01       	movw	r26, r16
    152a:	16 96       	adiw	r26, 0x06	; 6
    152c:	8d 91       	ld	r24, X+
    152e:	9c 91       	ld	r25, X
    1530:	17 97       	sbiw	r26, 0x07	; 7
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	17 96       	adiw	r26, 0x07	; 7
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
    153a:	16 97       	sbiw	r26, 0x06	; 6
    153c:	ce 01       	movw	r24, r28
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <__ultoa_invert>:
    1548:	fa 01       	movw	r30, r20
    154a:	aa 27       	eor	r26, r26
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	51 f1       	breq	.+84     	; 0x15a4 <__ultoa_invert+0x5c>
    1550:	20 31       	cpi	r18, 0x10	; 16
    1552:	81 f1       	breq	.+96     	; 0x15b4 <__ultoa_invert+0x6c>
    1554:	e8 94       	clt
    1556:	6f 93       	push	r22
    1558:	6e 7f       	andi	r22, 0xFE	; 254
    155a:	6e 5f       	subi	r22, 0xFE	; 254
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	af 4f       	sbci	r26, 0xFF	; 255
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	3e d0       	rcall	.+124    	; 0x15e4 <__ultoa_invert+0x9c>
    1568:	b4 e0       	ldi	r27, 0x04	; 4
    156a:	3c d0       	rcall	.+120    	; 0x15e4 <__ultoa_invert+0x9c>
    156c:	67 0f       	add	r22, r23
    156e:	78 1f       	adc	r23, r24
    1570:	89 1f       	adc	r24, r25
    1572:	9a 1f       	adc	r25, r26
    1574:	a1 1d       	adc	r26, r1
    1576:	68 0f       	add	r22, r24
    1578:	79 1f       	adc	r23, r25
    157a:	8a 1f       	adc	r24, r26
    157c:	91 1d       	adc	r25, r1
    157e:	a1 1d       	adc	r26, r1
    1580:	6a 0f       	add	r22, r26
    1582:	71 1d       	adc	r23, r1
    1584:	81 1d       	adc	r24, r1
    1586:	91 1d       	adc	r25, r1
    1588:	a1 1d       	adc	r26, r1
    158a:	20 d0       	rcall	.+64     	; 0x15cc <__ultoa_invert+0x84>
    158c:	09 f4       	brne	.+2      	; 0x1590 <__ultoa_invert+0x48>
    158e:	68 94       	set
    1590:	3f 91       	pop	r19
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	26 9f       	mul	r18, r22
    1596:	11 24       	eor	r1, r1
    1598:	30 19       	sub	r19, r0
    159a:	30 5d       	subi	r19, 0xD0	; 208
    159c:	31 93       	st	Z+, r19
    159e:	de f6       	brtc	.-74     	; 0x1556 <__ultoa_invert+0xe>
    15a0:	cf 01       	movw	r24, r30
    15a2:	08 95       	ret
    15a4:	46 2f       	mov	r20, r22
    15a6:	47 70       	andi	r20, 0x07	; 7
    15a8:	40 5d       	subi	r20, 0xD0	; 208
    15aa:	41 93       	st	Z+, r20
    15ac:	b3 e0       	ldi	r27, 0x03	; 3
    15ae:	0f d0       	rcall	.+30     	; 0x15ce <__ultoa_invert+0x86>
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x5c>
    15b2:	f6 cf       	rjmp	.-20     	; 0x15a0 <__ultoa_invert+0x58>
    15b4:	46 2f       	mov	r20, r22
    15b6:	4f 70       	andi	r20, 0x0F	; 15
    15b8:	40 5d       	subi	r20, 0xD0	; 208
    15ba:	4a 33       	cpi	r20, 0x3A	; 58
    15bc:	18 f0       	brcs	.+6      	; 0x15c4 <__ultoa_invert+0x7c>
    15be:	49 5d       	subi	r20, 0xD9	; 217
    15c0:	31 fd       	sbrc	r19, 1
    15c2:	40 52       	subi	r20, 0x20	; 32
    15c4:	41 93       	st	Z+, r20
    15c6:	02 d0       	rcall	.+4      	; 0x15cc <__ultoa_invert+0x84>
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__ultoa_invert+0x6c>
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__ultoa_invert+0x58>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	a6 95       	lsr	r26
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	ba 95       	dec	r27
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x86>
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	61 05       	cpc	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	08 95       	ret
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	0a 2e       	mov	r0, r26
    15ea:	06 94       	lsr	r0
    15ec:	57 95       	ror	r21
    15ee:	47 95       	ror	r20
    15f0:	37 95       	ror	r19
    15f2:	27 95       	ror	r18
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__ultoa_invert+0xa2>
    15f8:	62 0f       	add	r22, r18
    15fa:	73 1f       	adc	r23, r19
    15fc:	84 1f       	adc	r24, r20
    15fe:	95 1f       	adc	r25, r21
    1600:	a0 1d       	adc	r26, r0
    1602:	08 95       	ret

00001604 <__prologue_saves__>:
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ca 1b       	sub	r28, r26
    162e:	db 0b       	sbc	r29, r27
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	09 94       	ijmp

0000163c <__epilogue_restores__>:
    163c:	2a 88       	ldd	r2, Y+18	; 0x12
    163e:	39 88       	ldd	r3, Y+17	; 0x11
    1640:	48 88       	ldd	r4, Y+16	; 0x10
    1642:	5f 84       	ldd	r5, Y+15	; 0x0f
    1644:	6e 84       	ldd	r6, Y+14	; 0x0e
    1646:	7d 84       	ldd	r7, Y+13	; 0x0d
    1648:	8c 84       	ldd	r8, Y+12	; 0x0c
    164a:	9b 84       	ldd	r9, Y+11	; 0x0b
    164c:	aa 84       	ldd	r10, Y+10	; 0x0a
    164e:	b9 84       	ldd	r11, Y+9	; 0x09
    1650:	c8 84       	ldd	r12, Y+8	; 0x08
    1652:	df 80       	ldd	r13, Y+7	; 0x07
    1654:	ee 80       	ldd	r14, Y+6	; 0x06
    1656:	fd 80       	ldd	r15, Y+5	; 0x05
    1658:	0c 81       	ldd	r16, Y+4	; 0x04
    165a:	1b 81       	ldd	r17, Y+3	; 0x03
    165c:	aa 81       	ldd	r26, Y+2	; 0x02
    165e:	b9 81       	ldd	r27, Y+1	; 0x01
    1660:	ce 0f       	add	r28, r30
    1662:	d1 1d       	adc	r29, r1
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	ed 01       	movw	r28, r26
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
